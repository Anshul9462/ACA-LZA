targetScope = 'subscription'

// ------------------
//    PARAMETERS
// ------------------

@minLength(2)
@maxLength(10)
@description('The name of the workloard that is being deployed. Up to 10 characters long.')
param workloadName string

@description('The name of the environment (e.g. "dev", "test", "prod", "uat", "dr", "qa") Up to 8 characters long.')
@maxLength(8)
param environment string

@description('The location where the resources will be created.')
param location string = deployment().location

@description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')
param spokeResourceGroupName string

@description('Optional. The tags to be assigned to the created resources.')
param tags object = {}

// Hub
@description('The resource ID of the Hub Virtual Network.')
param hubVNetId string

// Spoke

@description('CIDR of the Spoke Virtual Network.')
param spokeVNetAddressPrefixes array

@description('Optional. The name of the subnet to create for the spoke infrastructure. If set, it overrides the name generated by the template.')
param spokeInfraSubnetName string = 'snet-infra'

@description('CIDR of the Spoke Infrastructure Subnet.')
param spokeInfraSubnetAddressPrefix string

@description('Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template.')
param spokePrivateEndpointsSubnetName string = 'snet-pep'

@description('CIDR of the Spoke Private Endpoints Subnet.')
param spokePrivateEndpointsSubnetAddressPrefix string

@description('Optional. The name of the subnet to create for the spoke application gateway. If set, it overrides the name generated by the template.')
param spokeApplicationGatewaySubnetName string = 'snet-agw'

@description('CIDR of the Spoke Application Gateway Subnet. If the value is emnpty, the subnet will not be created.')
param spokeApplicationGatewaySubnetAddressPrefix string

// ------------------
// VARIABLES
// ------------------

// load as text (and not as Json) to replace <location> placeholder in the nsg rules
var nsgCaeRules = json( replace( loadTextContent('./nsgContainerAppsEnvironment.jsonc') , '<location>', location) )
var nsgAppGwRules = loadJsonContent('./nsgAppGwRules.jsonc', 'securityRules')
var namingRules = json(loadTextContent('../../../../shared/bicep/naming/naming-rules.jsonc'))

var rgSpokeName = !empty(spokeResourceGroupName) ? spokeResourceGroupName : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-spoke-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'
var hubVNetResourIdTokens = !empty(hubVNetId) ? split(hubVNetId, '/') : array('')
var hubSubscriptionId = hubVNetResourIdTokens[2]
var hubResourceGroupName = hubVNetResourIdTokens[4]
var hubVNetName = hubVNetResourIdTokens[8]

// Subnet definition taking in consideration feature flags
var defaultSubnets = [
  {
    name: spokeInfraSubnetName
    properties: {
      addressPrefix: spokeInfraSubnetAddressPrefix
      networkSecurityGroup: {
        id: nsgContainerAppsEnvironment.outputs.nsgId
      }
    }
  }
  {
    name: spokePrivateEndpointsSubnetName
    properties: {
      addressPrefix: spokePrivateEndpointsSubnetAddressPrefix
    }
  }
]

// Append optional application gateway subnet, if required
var spokeSubnets = !empty(spokeApplicationGatewaySubnetAddressPrefix) ? concat(defaultSubnets, [
    {
      name: spokeApplicationGatewaySubnetName
      properties: {
        addressPrefix: spokeApplicationGatewaySubnetAddressPrefix
        networkSecurityGroup: {
          id: nsgAppGw.outputs.nsgId
        }
      }
    }
  ]) : defaultSubnets


// ------------------
// RESOURCES
// ------------------

resource spokeResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {
  name: rgSpokeName
  location: location
  tags: tags
}

module naming '../../../../shared/bicep/naming/naming.module.bicep' = {
  scope: spokeResourceGroup
  name: take('02-sharedNamingDeployment-${deployment().name}', 64)
  params: {
    uniqueId: uniqueString(spokeResourceGroup.id)
    environment: environment
    workloadName: workloadName
    location: location
  }
}

module vnetSpoke '../../../../shared/bicep/vnet.bicep' = {
  name: take('vnetSpoke-${deployment().name}', 64)
  scope: spokeResourceGroup
  params: {
    name: naming.outputs.resourcesNames.vnetSpoke
    location: location
    tags: tags
    subnets: spokeSubnets
    vnetAddressPrefixes: spokeVNetAddressPrefixes
  }
}

module nsgContainerAppsEnvironment '../../../../shared/bicep/nsg.bicep' = {
  name: take('nsgContainerAppsEnvironment-${deployment().name}', 64)
  scope: spokeResourceGroup
  params: {
    name: naming.outputs.resourcesNames.containerAppsEnvironmentNsg
    location: location
    tags: tags
    securityRules: nsgCaeRules.securityRules
  }
}

module nsgAppGw '../../../../shared/bicep/nsg.bicep' = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {
  name: take('nsgAppGw-${deployment().name}', 64)
  scope: spokeResourceGroup
  params: {
    name: naming.outputs.resourcesNames.applicationGatewayNsg
    location: location
    tags: tags
    securityRules: nsgAppGwRules
  }
}

module peerSpokeToHub '../../../../shared/bicep/peering.bicep' = if (!empty(hubVNetId))  {
  name: take('${deployment().name}-peerSpokeToHubDeployment', 64)
  scope: spokeResourceGroup
  params: {
    localVnetName: vnetSpoke.outputs.vnetName
    remoteSubscriptionId: hubSubscriptionId
    remoteRgName: hubResourceGroupName
    remoteVnetName: hubVNetName
  }
}

module peerHubToSpoke '../../../../shared/bicep/peering.bicep' = if (!empty(hubVNetId) )  {
  name: take('${deployment().name}-peerHubToSpokeDeployment', 64)
  scope: resourceGroup(hubSubscriptionId, hubResourceGroupName)
    params: {
      localVnetName: hubVNetName
      remoteSubscriptionId: last(split(subscription().id, '/'))!
      remoteRgName: spokeResourceGroup.name
      remoteVnetName: vnetSpoke.outputs.vnetName
  }
}

resource vnetSpokeCreated 'Microsoft.Network/virtualNetworks@2022-07-01' existing = {
  name: vnetSpoke.outputs.vnetName
  scope: spokeResourceGroup
}

resource spokeInfraSubnet 'Microsoft.Network/virtualNetworks/subnets@2022-07-01' existing = {
  parent: vnetSpokeCreated
  name: spokeInfraSubnetName
}

resource spokePrivateEndpointsSubnet 'Microsoft.Network/virtualNetworks/subnets@2022-07-01' existing = {
  parent: vnetSpokeCreated
  name: spokePrivateEndpointsSubnetName
}

resource spokeApplicationGatewaySubnet 'Microsoft.Network/virtualNetworks/subnets@2022-07-01' existing = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {
  parent: vnetSpokeCreated
  name: spokeApplicationGatewaySubnetName
}

// ------------------
// OUTPUTS
// ------------------

@description('The name of the Hub resource group.')
output spokeResourceGroupName string = spokeResourceGroup.name

@description('The  resource ID of the Spoke Virtual Network.')
output spokeVNetId string = vnetSpokeCreated.id

@description('The name of the Spoke Virtual Network.')
output spokeVNetName string = vnetSpokeCreated.name

@description('The resource ID of the Spoke Infrastructure Subnet.')
output spokeInfraSubnetId string = spokeInfraSubnet.id

@description('The name of the Spoke Infrastructure Subnet.')
output spokeInfraSubnetName string = spokeInfraSubnet.name

@description('The resource ID of the Spoke Private Endpoints Subnet.')
output spokePrivateEndpointsSubnetId string = spokePrivateEndpointsSubnet.id

@description('The name of the Spoke Private Endpoints Subnet.')
output spokePrivateEndpointsSubnetName string = spokePrivateEndpointsSubnet.name

@description('The resource ID of the Spoke Application Gateway Subnet. If "spokeApplicationGatewaySubnetAddressPrefix" is empty, the subnet will not be created and the value returned is empty.')
output spokeApplicationGatewaySubnetId string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? spokeApplicationGatewaySubnet.id : ''

@description('The name of the Spoke Application Gateway Subnet.  If "spokeApplicationGatewaySubnetAddressPrefix" is empty, the subnet will not be created and the value returned is empty.')
output spokeApplicationGatewaySubnetName string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? spokeApplicationGatewaySubnet.name : ''
