{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "14308216302892243410"
    }
  },
  "parameters": {
    "workloadName": {
      "type": "string",
      "defaultValue": "aca-lza",
      "maxLength": 10,
      "minLength": 2,
      "metadata": {
        "description": "The name of the workload that is being deployed. Up to 10 characters long."
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "test",
      "maxLength": 8,
      "metadata": {
        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The location where the resources will be created."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The tags to be assigned to the created resources."
      }
    },
    "hubResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the hub resource group to create the resources in. If set, it overrides the name generated by the template."
      }
    },
    "vnetAddressPrefixes": {
      "type": "array",
      "metadata": {
        "description": "The address prefixes to use for the virtual network."
      }
    },
    "enableBastion": {
      "type": "bool",
      "metadata": {
        "description": "Enable or disable the creation of the Azure Bastion."
      }
    },
    "bastionSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "CIDR to use for the Azure Bastion subnet."
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "The size of the virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information."
      }
    },
    "vmAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "The username to use for the virtual machine."
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password to use for the virtual machine."
      }
    },
    "vmLinuxSshAuthorizedKeys": {
      "type": "securestring",
      "metadata": {
        "description": "The SSH public key to use for the virtual machine."
      }
    },
    "vmJumpboxOSType": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [
        "linux",
        "windows",
        "none"
      ]
    },
    "vmJumpBoxSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "CIDR to use for the virtual machine subnet."
      }
    },
    "spokeResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template."
      }
    },
    "spokeVNetAddressPrefixes": {
      "type": "array",
      "metadata": {
        "description": "CIDR of the Spoke Virtual Network."
      }
    },
    "spokeInfraSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "CIDR of the Spoke Infrastructure Subnet."
      }
    },
    "spokePrivateEndpointsSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "CIDR of the Spoke Private Endpoints Subnet."
      }
    },
    "spokeApplicationGatewaySubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "CIDR of the Spoke Application Gateway Subnet."
      }
    },
    "enableApplicationInsights": {
      "type": "bool",
      "metadata": {
        "description": "Enable or disable the createion of Application Insights."
      }
    },
    "enableDaprInstrumentation": {
      "type": "bool",
      "metadata": {
        "description": "Enable or disable Dapr Application Instrumentation Key used for Dapr telemetry. If Application Insights is not enabled, this parameter is ignored."
      }
    },
    "deployHelloWorldSample": {
      "type": "bool",
      "metadata": {
        "description": "Enable or disable the deployment of the Hello World Sample App. If disabled, the Application Gateway will not be deployed."
      }
    },
    "applicationGatewayFqdn": {
      "type": "string",
      "metadata": {
        "description": "The FQDN of the Application Gateway. Must match the TLS Certificate."
      }
    },
    "enableApplicationGatewayCertificate": {
      "type": "bool",
      "metadata": {
        "description": "Enable or disable Application Gateway Certificate (PFX)."
      }
    },
    "applicationGatewayCertificateKeyName": {
      "type": "string",
      "metadata": {
        "description": "The name of the certificate key to use for Application Gateway certificate."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable usage and telemetry feedback to Microsoft."
      }
    },
    "deployRedisCache": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional, default value is false. If true, Azure Cache for Redis (Premium SKU), together with Private Endpoint and the relavant Private DNS Zone will be deployed"
      }
    }
  },
  "variables": {
    "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
    "namingRules": "[json(variables('$fxv#0'))]",
    "rgHubName": "[if(not(empty(parameters('hubResourceGroupName'))), parameters('hubResourceGroupName'), format('{0}-{1}-hub-{2}-{3}', variables('namingRules').resourceTypeAbbreviations.resourceGroup, parameters('workloadName'), parameters('environment'), variables('namingRules').regionAbbreviations[toLower(parameters('location'))]))]",
    "rgSpokeName": "[if(not(empty(parameters('spokeResourceGroupName'))), parameters('spokeResourceGroupName'), format('{0}-{1}-spoke-{2}-{3}', variables('namingRules').resourceTypeAbbreviations.resourceGroup, parameters('workloadName'), parameters('environment'), variables('namingRules').regionAbbreviations[toLower(parameters('location'))]))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2020-06-01",
      "name": "[variables('rgSpokeName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('hub-{0}-deployment', deployment().name), 64)]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "hubResourceGroupName": {
            "value": "[variables('rgHubName')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "vnetAddressPrefixes": {
            "value": "[parameters('vnetAddressPrefixes')]"
          },
          "enableBastion": {
            "value": "[parameters('enableBastion')]"
          },
          "bastionSubnetAddressPrefix": {
            "value": "[parameters('bastionSubnetAddressPrefix')]"
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          },
          "vmAdminUsername": {
            "value": "[parameters('vmAdminUsername')]"
          },
          "vmAdminPassword": {
            "value": "[parameters('vmAdminPassword')]"
          },
          "vmLinuxSshAuthorizedKeys": {
            "value": "[parameters('vmLinuxSshAuthorizedKeys')]"
          },
          "vmJumpboxOSType": {
            "value": "[parameters('vmJumpboxOSType')]"
          },
          "vmJumpBoxSubnetAddressPrefix": {
            "value": "[parameters('vmJumpBoxSubnetAddressPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "15798059479114563505"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "maxLength": 10,
              "minLength": 2,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The location where the resources will be created."
              }
            },
            "hubResourceGroupName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "vnetAddressPrefixes": {
              "type": "array",
              "metadata": {
                "description": "CIDR of the hub virtual network."
              }
            },
            "enableBastion": {
              "type": "bool",
              "metadata": {
                "description": "Enable or disable the creation of the Azure Bastion."
              }
            },
            "bastionSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR to use for the Azure Bastion subnet."
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information."
              }
            },
            "vmAdminUsername": {
              "type": "string",
              "metadata": {
                "description": "The username to use for the jump box."
              }
            },
            "vmAdminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The password to use for the jump box."
              }
            },
            "vmLinuxSshAuthorizedKeys": {
              "type": "securestring",
              "metadata": {
                "description": "The SSH public key to use for the jump box. Only relevant for Linux."
              }
            },
            "vmJumpboxOSType": {
              "type": "string",
              "defaultValue": "none",
              "allowedValues": [
                "linux",
                "windows",
                "none"
              ],
              "metadata": {
                "description": "The OS of the jump box virtual machine to create. If set to \"none\", no jump box will be created."
              }
            },
            "vmSubnetName": {
              "type": "string",
              "defaultValue": "snet-jumpbox",
              "metadata": {
                "description": "Optional. The name of the subnet to create for the jump box. If set, it overrides the name generated by the template."
              }
            },
            "vmJumpBoxSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR to use for the jump box subnet."
              }
            }
          },
          "variables": {
            "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
            "defaultSubnets": [],
            "bastionSubnetName": "AzureBastionSubnet",
            "subnets": "[if(parameters('enableBastion'), concat(variables('defaultSubnets'), createArray(createObject('name', variables('bastionSubnetName'), 'properties', createObject('addressPrefix', parameters('bastionSubnetAddressPrefix'))))), variables('defaultSubnets'))]",
            "vnetSubnets": "[if(not(equals(parameters('vmJumpboxOSType'), 'none')), concat(variables('subnets'), createArray(createObject('name', parameters('vmSubnetName'), 'properties', createObject('addressPrefix', parameters('vmJumpBoxSubnetAddressPrefix'))))), variables('subnets'))]",
            "namingRules": "[json(variables('$fxv#0'))]",
            "rgHubName": "[if(not(empty(parameters('hubResourceGroupName'))), parameters('hubResourceGroupName'), format('{0}-{1}-hub-{2}-{3}', variables('namingRules').resourceTypeAbbreviations.resourceGroup, parameters('workloadName'), parameters('environment'), variables('namingRules').regionAbbreviations[toLower(parameters('location'))]))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[variables('rgHubName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "metadata": {
                "description": "The hub resource group. This would normally be already provisioned by your platform team."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgHubName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName')))]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "14985913302549051532"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      },
                      "maxLength": 10,
                      "minLength": 2
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "keyVaultUserAssignedIdentity": "[format('{0}-{1}-KeyVaultReader', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName'))]"
              ],
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('vnetHub-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgHubName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vnetHub]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "subnets": {
                    "value": "[variables('vnetSubnets')]"
                  },
                  "vnetAddressPrefixes": {
                    "value": "[parameters('vnetAddressPrefixes')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "10750814407079155041"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 80,
                      "minLength": 2,
                      "metadata": {
                        "description": "Name of the resource Virtual Network (The name must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens)"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Region where the resource will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "key-value pairs as tags, to identify the resource"
                      }
                    },
                    "vnetAddressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Array, CIDRs to be allocated to the new vnet i.e. 192.168.0.0/24"
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Pass an array of objects for all the required subnets"
                      }
                    },
                    "ddosProtectionPlanId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    }
                  },
                  "variables": {
                    "vnetNameMaxLength": 80,
                    "vnetName": "[take(parameters('name'), variables('vnetNameMaxLength'))]",
                    "ddosProtectionPlan": {
                      "id": "[parameters('ddosProtectionPlanId')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2022-07-01",
                      "name": "[variables('vnetName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": "[parameters('vnetAddressPrefixes')]"
                        },
                        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]",
                        "subnets": "[parameters('subnets')]"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "vnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource id of the newly created Virtual network"
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    },
                    "vnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name of the newly created Virtual network"
                      },
                      "value": "[variables('vnetName')]"
                    },
                    "vnetSubnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Outputs the array of the subnets, printing: index, subnetResourceId, subnerName. "
                      },
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": {
                          "subnetIndex": "[copyIndex()]",
                          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-07-01').subnets[copyIndex()].id]",
                          "name": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-07-01').subnets[copyIndex()].name]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "The virtual network used as the stand-in for the regional hub. This would normally be already provisioned by your platform team."
              }
            },
            {
              "condition": "[parameters('enableBastion')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('bastion-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgHubName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "bastionName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.bastion]"
                  },
                  "bastionNetworkSecurityGroupName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.bastionNsg]"
                  },
                  "bastionPublicIpName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.bastionPip]"
                  },
                  "bastionSubnetName": {
                    "value": "[variables('bastionSubnetName')]"
                  },
                  "bastionSubnetAddressPrefix": {
                    "value": "[parameters('bastionSubnetAddressPrefix')]"
                  },
                  "bastionVNetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('vnetHub-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "11089184817356857131"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the resources will be created."
                      }
                    },
                    "bastionName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the bastion host to create."
                      }
                    },
                    "bastionVNetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network in which bastion subnet is created."
                      }
                    },
                    "bastionSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the bastion subnet."
                      }
                    },
                    "bastionSubnetAddressPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "CIDR of the bastion subnet."
                      }
                    },
                    "bastionNetworkSecurityGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the network security group to create."
                      }
                    },
                    "bastionPublicIpName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the public IP address to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName'))]",
                      "properties": {
                        "addressPrefix": "[parameters('bastionSubnetAddressPrefix')]",
                        "networkSecurityGroup": {
                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('bastionPublicIpName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "Standard",
                        "tier": "Regional"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "Static"
                      }
                    },
                    {
                      "type": "Microsoft.Network/bastionHosts",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('bastionName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconf",
                            "properties": {
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('bastionPublicIpName'))]"
                              },
                              "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName')), '/')[0], split(format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName')), '/')[1])]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName'))]",
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('bastionPublicIpName'))]",
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName')), '/')[0], split(format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName')), '/')[1])]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('bastionNetworkSecurityGroupName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "securityRules": [
                          {
                            "name": "AllowHttpsInbound",
                            "properties": {
                              "priority": 120,
                              "protocol": "Tcp",
                              "destinationPortRange": "443",
                              "access": "Allow",
                              "direction": "Inbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "Internet",
                              "destinationAddressPrefix": "*"
                            }
                          },
                          {
                            "name": "AllowGatewayManagerInbound",
                            "properties": {
                              "priority": 130,
                              "protocol": "Tcp",
                              "destinationPortRange": "443",
                              "access": "Allow",
                              "direction": "Inbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "GatewayManager",
                              "destinationAddressPrefix": "*"
                            }
                          },
                          {
                            "name": "AllowAzureLoadBalancerInbound",
                            "properties": {
                              "priority": 140,
                              "protocol": "Tcp",
                              "destinationPortRange": "443",
                              "access": "Allow",
                              "direction": "Inbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "AzureLoadBalancer",
                              "destinationAddressPrefix": "*"
                            }
                          },
                          {
                            "name": "AllowBastionHostCommunicationInbound",
                            "properties": {
                              "priority": 150,
                              "protocol": "*",
                              "destinationPortRanges": [
                                "8080",
                                "5701"
                              ],
                              "access": "Allow",
                              "direction": "Inbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "VirtualNetwork",
                              "destinationAddressPrefix": "VirtualNetwork"
                            }
                          },
                          {
                            "name": "AllowSshRdpOutbound",
                            "properties": {
                              "priority": 100,
                              "protocol": "*",
                              "destinationPortRanges": [
                                "22",
                                "3389"
                              ],
                              "access": "Allow",
                              "direction": "Outbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "VirtualNetwork"
                            }
                          },
                          {
                            "name": "AllowAzureCloudOutbound",
                            "properties": {
                              "priority": 110,
                              "protocol": "Tcp",
                              "destinationPortRange": "443",
                              "access": "Allow",
                              "direction": "Outbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "AzureCloud"
                            }
                          },
                          {
                            "name": "AllowBastionCommunication",
                            "properties": {
                              "priority": 120,
                              "protocol": "*",
                              "destinationPortRanges": [
                                "8080",
                                "5701"
                              ],
                              "access": "Allow",
                              "direction": "Outbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "VirtualNetwork",
                              "destinationAddressPrefix": "VirtualNetwork"
                            }
                          },
                          {
                            "name": "AllowGetSessionInformation",
                            "properties": {
                              "priority": 130,
                              "protocol": "*",
                              "destinationPortRange": "80",
                              "access": "Allow",
                              "direction": "Outbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "Internet"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('vnetHub-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "An optional Azure Bastion deployment for jump box access. This would normally be already provisioned by your platform team."
              }
            },
            {
              "condition": "[equals(parameters('vmJumpboxOSType'), 'linux')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('vm-linux-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgHubName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "vmName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBox]"
                  },
                  "vmAdminUsername": {
                    "value": "[parameters('vmAdminUsername')]"
                  },
                  "vmAdminPassword": {
                    "value": "[parameters('vmAdminPassword')]"
                  },
                  "vmSshPublicKey": {
                    "value": "[parameters('vmLinuxSshAuthorizedKeys')]"
                  },
                  "vmSize": {
                    "value": "[parameters('vmSize')]"
                  },
                  "vmVnetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('vnetHub-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
                  },
                  "vmSubnetName": {
                    "value": "[parameters('vmSubnetName')]"
                  },
                  "vmSubnetAddressPrefix": {
                    "value": "[parameters('vmJumpBoxSubnetAddressPrefix')]"
                  },
                  "vmNetworkInterfaceName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBoxNic]"
                  },
                  "vmNetworkSecurityGroupName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBoxNsg]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "11874839089691230966"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string"
                    },
                    "vmSize": {
                      "type": "string"
                    },
                    "vmVnetName": {
                      "type": "string"
                    },
                    "vmSubnetName": {
                      "type": "string"
                    },
                    "vmSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "vmNetworkSecurityGroupName": {
                      "type": "string"
                    },
                    "vmNetworkInterfaceName": {
                      "type": "string"
                    },
                    "vmAdminUsername": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "securestring"
                    },
                    "vmSshPublicKey": {
                      "type": "securestring"
                    },
                    "vmAuthenticationType": {
                      "type": "string",
                      "defaultValue": "password",
                      "allowedValues": [
                        "sshPublicKey",
                        "password"
                      ],
                      "metadata": {
                        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "variables": {
                    "linuxConfiguration": {
                      "disablePasswordAuthentication": true,
                      "ssh": {
                        "publicKeys": [
                          {
                            "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('vmAdminUsername'))]",
                            "keyData": "[parameters('vmSshPublicKey')]"
                          }
                        ]
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('vmNetworkSecurityGroupName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "securityRules": []
                      }
                    },
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName'))]",
                      "properties": {
                        "addressPrefix": "[parameters('vmSubnetAddressPrefix')]",
                        "networkSecurityGroup": {
                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vmNetworkSecurityGroupName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vmNetworkSecurityGroupName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('vmNetworkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                              },
                              "privateIPAllocationMethod": "Dynamic"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('vmName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "osProfile": {
                          "computerName": "[parameters('vmName')]",
                          "adminUsername": "[parameters('vmAdminUsername')]",
                          "adminPassword": "[parameters('vmAdminPassword')]",
                          "linuxConfiguration": "[if(equals(parameters('vmAuthenticationType'), 'password'), null(), variables('linuxConfiguration'))]"
                        },
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "storageProfile": {
                          "osDisk": {
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "Standard_LRS"
                            }
                          },
                          "imageReference": {
                            "publisher": "Canonical",
                            "offer": "UbuntuServer",
                            "sku": "18.04-LTS",
                            "version": "latest"
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('vmNetworkInterfaceName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('vmNetworkInterfaceName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('vnetHub-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "An optional Linux virtual machine deployment to act as a jump box."
              }
            },
            {
              "condition": "[equals(parameters('vmJumpboxOSType'), 'windows')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('vm-windows-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgHubName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "vmName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBox]"
                  },
                  "vmAdminUsername": {
                    "value": "[parameters('vmAdminUsername')]"
                  },
                  "vmAdminPassword": {
                    "value": "[parameters('vmAdminPassword')]"
                  },
                  "vmSize": {
                    "value": "[parameters('vmSize')]"
                  },
                  "vmVnetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('vnetHub-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
                  },
                  "vmSubnetName": {
                    "value": "[parameters('vmSubnetName')]"
                  },
                  "vmSubnetAddressPrefix": {
                    "value": "[parameters('vmJumpBoxSubnetAddressPrefix')]"
                  },
                  "vmNetworkInterfaceName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBoxNic]"
                  },
                  "vmNetworkSecurityGroupName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBoxNsg]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "13764422953123404114"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string"
                    },
                    "vmSize": {
                      "type": "string"
                    },
                    "vmWindowsOSVersion": {
                      "type": "string",
                      "defaultValue": "2016-Datacenter"
                    },
                    "vmVnetName": {
                      "type": "string"
                    },
                    "vmSubnetName": {
                      "type": "string"
                    },
                    "vmSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "vmNetworkSecurityGroupName": {
                      "type": "string"
                    },
                    "vmNetworkInterfaceName": {
                      "type": "string"
                    },
                    "vmAdminUsername": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "securestring"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('vmNetworkSecurityGroupName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "securityRules": []
                      }
                    },
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName'))]",
                      "properties": {
                        "addressPrefix": "[parameters('vmSubnetAddressPrefix')]",
                        "networkSecurityGroup": {
                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vmNetworkSecurityGroupName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vmNetworkSecurityGroupName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('vmNetworkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                              },
                              "privateIPAllocationMethod": "Dynamic"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[parameters('vmName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "zones": [
                        "1"
                      ],
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "storageProfile": {
                          "osDisk": {
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "Standard_LRS"
                            }
                          },
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "[parameters('vmWindowsOSVersion')]",
                            "version": "latest"
                          }
                        },
                        "osProfile": {
                          "computerName": "[parameters('vmName')]",
                          "adminUsername": "[parameters('vmAdminUsername')]",
                          "adminPassword": "[parameters('vmAdminPassword')]"
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('vmNetworkInterfaceName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('vmNetworkInterfaceName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('vnetHub-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "An optional Windows virtual machine deployment to act as a jump box."
              }
            }
          ],
          "outputs": {
            "hubVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of hub virtual network."
              },
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('vnetHub-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetId.value]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the hub resource group."
              },
              "value": "[variables('rgHubName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('spoke-{0}-deployment', deployment().name), 64)]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "spokeResourceGroupName": {
            "value": "[variables('rgSpokeName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "hubVNetId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.hubVNetId.value]"
          },
          "spokeApplicationGatewaySubnetAddressPrefix": {
            "value": "[parameters('spokeApplicationGatewaySubnetAddressPrefix')]"
          },
          "spokeInfraSubnetAddressPrefix": {
            "value": "[parameters('spokeInfraSubnetAddressPrefix')]"
          },
          "spokePrivateEndpointsSubnetAddressPrefix": {
            "value": "[parameters('spokePrivateEndpointsSubnetAddressPrefix')]"
          },
          "spokeVNetAddressPrefixes": {
            "value": "[parameters('spokeVNetAddressPrefixes')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "449241502517533227"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "maxLength": 10,
              "minLength": 2,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The location where the resources will be created. This should be the same region as the hub."
              }
            },
            "spokeResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "hubVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing hub virtual network."
              }
            },
            "spokeVNetAddressPrefixes": {
              "type": "array",
              "metadata": {
                "description": "CIDR of the spoke virtual network. For most landing zone implementations, the spoke network would have been created by your platform team."
              }
            },
            "spokeInfraSubnetName": {
              "type": "string",
              "defaultValue": "snet-infra",
              "metadata": {
                "description": "Optional. The name of the subnet to create for the spoke infrastructure. If set, it overrides the name generated by the template."
              }
            },
            "spokeInfraSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the spoke infrastructure subnet."
              }
            },
            "spokePrivateEndpointsSubnetName": {
              "type": "string",
              "defaultValue": "snet-pep",
              "metadata": {
                "description": "Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template."
              }
            },
            "spokePrivateEndpointsSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the spoke private endpoints subnet."
              }
            },
            "spokeApplicationGatewaySubnetName": {
              "type": "string",
              "defaultValue": "snet-agw",
              "metadata": {
                "description": "Optional. The name of the subnet to create for the spoke application gateway. If set, it overrides the name generated by the template."
              }
            },
            "spokeApplicationGatewaySubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the spoke Application Gateway subnet. If the value is empty, this subnet will not be created."
              }
            }
          },
          "variables": {
            "$fxv#0": "{\n    //security rules (as of 2023-march-10): https://learn.microsoft.com/azure/container-apps/firewall-integration#nsg-allow-rules\n    //Inbound rules are not required, if we leave the default inbound rules 65000 and 65001\n    \"securityRules\": [\n        // {\n        //     \"name\": \"Allow_communication_between_IPs_in_the_infra_subnet\",\n        //     \"properties\": {\n        //         \"description\": \"Allow communication between IPs in the infrastructure subnet. This address is passed as a parameter when you create an environment. For example, 10.0.0.0/21.\",\n        //         \"protocol\": \"*\",\n        //         \"sourceAddressPrefix\": \"10.0.0.0/21\",\n        //         \"sourcePortRange\": \"*\",\n        //         \"destinationAddressPrefix\": \"10.0.0.0/21\",\n        //         \"destinationPortRange\": \"*\",\n        //         \"access\": \"Allow\",\n        //         \"priority\": 100,\n        //         \"direction\": \"Inbound\"\n        //     }\n        // },\n        // {\n        //     \"name\": \"Allow_Azure_Loadbalancer_To_Communicate_with_the_Environment\",\n        //     \"properties\": {\n        //         \"description\": \"Allow the Azure infrastructure load balancer to communicate with your environment.\",\n        //         \"protocol\": \"*\",\n        //         \"sourceAddressPrefix\": \"AzureLoadBalancer\",\n        //         \"sourcePortRange\": \"*\",\n        //         \"destinationAddressPrefix\": \"10.0.0.0/21\",\n        //         \"destinationPortRange\": \"*\",\n        //         \"access\": \"Allow\",\n        //         \"priority\": 110,\n        //         \"direction\": \"Inbound\"\n        //     }\n        // },\n        {\n            \"name\": \"Allow_Internal_AKS_Connection_Between_Nodes_And_Control_Plane_UDP\",\n            \"properties\": {\n                \"description\": \"internal AKS secure connection between underlying nodes and control plane..\",\n                \"protocol\": \"UDP\",\n                \"sourceAddressPrefix\": \"VirtualNetwork\",\n                \"sourcePortRange\": \"*\",\n                \"destinationAddressPrefix\": \"AzureCloud.<location>\",\n                \"destinationPortRange\": \"1194\",\n                \"access\": \"Allow\",\n                \"priority\": 100,\n                \"direction\": \"Outbound\"\n            }\n        },\n        {\n            \"name\": \"Allow_Internal_AKS_Connection_Between_Nodes_And_Control_Plane_TCP\",\n            \"properties\": {\n                \"description\": \"internal AKS secure connection between underlying nodes and control plane..\",\n                \"protocol\": \"TCP\",\n                \"sourceAddressPrefix\": \"VirtualNetwork\",\n                \"sourcePortRange\": \"*\",\n                \"destinationAddressPrefix\": \"AzureCloud.<location>\",\n                \"destinationPortRange\": \"9000\",\n                \"access\": \"Allow\",\n                \"priority\": 110,\n                \"direction\": \"Outbound\"\n            }\n        },\n        {\n            \"name\": \"Allow_Azure_Monitor\",\n            \"properties\": {\n                \"description\": \"Allows outbound calls to Azure Monitor.\",\n                \"protocol\": \"TCP\",\n                \"sourceAddressPrefix\": \"VirtualNetwork\",\n                \"sourcePortRange\": \"*\",\n                \"destinationAddressPrefix\": \"AzureCloud.<location>\",\n                \"destinationPortRange\": \"443\",\n                \"access\": \"Allow\",\n                \"priority\": 120,\n                \"direction\": \"Outbound\"\n            }\n        },\n        {\n            \"name\": \"Allow_Outbound_443\",\n            \"properties\": {\n                \"description\": \"Allowing all outbound on port 443 provides a way to allow all FQDN based outbound dependencies that don't have a static IP\",\n                \"protocol\": \"TCP\",\n                \"sourceAddressPrefix\": \"VirtualNetwork\",\n                \"sourcePortRange\": \"*\",\n                \"destinationAddressPrefix\": \"*\",\n                \"destinationPortRange\": \"443\",\n                \"access\": \"Allow\",\n                \"priority\": 130,\n                \"direction\": \"Outbound\"\n            }\n        },\n        {\n            \"name\": \"Allow_NTP_Server\",\n            \"properties\": {\n                \"description\": \"NTP server\",\n                \"protocol\": \"UDP\",\n                \"sourceAddressPrefix\": \"VirtualNetwork\",\n                \"sourcePortRange\": \"*\",\n                \"destinationAddressPrefix\": \"*\",\n                \"destinationPortRange\": \"123\",\n                \"access\": \"Allow\",\n                \"priority\": 140,\n                \"direction\": \"Outbound\"\n            }\n        },\n        {\n            \"name\": \"Allow_Container_Apps_control_plane\",\n            \"properties\": {\n                \"description\": \"Container Apps control plane\",\n                \"protocol\": \"TCP\",\n                \"sourceAddressPrefix\": \"VirtualNetwork\",\n                \"sourcePortRange\": \"*\",\n                \"destinationAddressPrefix\": \"*\",\n                \"destinationPortRanges\": [\n                    \"5671\",\n                    \"5672\"\n                ],\n                \"access\": \"Allow\",\n                \"priority\": 150,\n                \"direction\": \"Outbound\"\n            }\n        }\n    ]\n}",
            "$fxv#1": [
              {
                "name": "HealthProbes",
                "properties": {
                  "description": "Sllow HealthProbes from gateway Manager.",
                  "protocol": "*",
                  "sourceAddressPrefix": "GatewayManager",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "65200-65535",
                  "access": "Allow",
                  "priority": 100,
                  "direction": "Inbound"
                }
              },
              {
                "name": "Allow_TLS",
                "properties": {
                  "description": "allow https incoming connections",
                  "protocol": "*",
                  "sourceAddressPrefix": "*",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "443",
                  "access": "Allow",
                  "priority": 110,
                  "direction": "Inbound"
                }
              },
              {
                "name": "Allow_HTTP",
                "properties": {
                  "description": "allow http incoming connections",
                  "protocol": "*",
                  "sourceAddressPrefix": "*",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "80",
                  "access": "Allow",
                  "priority": 120,
                  "direction": "Inbound"
                }
              },
              {
                "name": "Allow_AzureLoadBalancer",
                "properties": {
                  "description": "allow AzureLoadBalancer incoming connections",
                  "protocol": "*",
                  "sourceAddressPrefix": "AzureLoadBalancer",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "80",
                  "access": "Allow",
                  "priority": 130,
                  "direction": "Inbound"
                }
              }
            ],
            "$fxv#2": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
            "nsgCaeRules": "[json(replace(variables('$fxv#0'), '<location>', parameters('location')))]",
            "nsgAppGwRules": "[variables('$fxv#1')]",
            "namingRules": "[json(variables('$fxv#2'))]",
            "rgSpokeName": "[if(not(empty(parameters('spokeResourceGroupName'))), parameters('spokeResourceGroupName'), format('{0}-{1}-spoke-{2}-{3}', variables('namingRules').resourceTypeAbbreviations.resourceGroup, parameters('workloadName'), parameters('environment'), variables('namingRules').regionAbbreviations[toLower(parameters('location'))]))]",
            "hubVNetResourceIdTokens": "[if(not(empty(parameters('hubVNetId'))), split(parameters('hubVNetId'), '/'), array(''))]",
            "hubSubscriptionId": "[variables('hubVNetResourceIdTokens')[2]]",
            "hubResourceGroupName": "[variables('hubVNetResourceIdTokens')[4]]",
            "hubVNetName": "[variables('hubVNetResourceIdTokens')[8]]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[variables('rgSpokeName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "metadata": {
                "description": "The spoke resource group. This would normally be already provisioned by your subscription vending process."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "14985913302549051532"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      },
                      "maxLength": 10,
                      "minLength": 2
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "keyVaultUserAssignedIdentity": "[format('{0}-{1}-KeyVaultReader', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
              ],
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('vnetSpoke-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vnetSpoke]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnets": "[if(not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix'))), createObject('value', concat(createArray(createObject('name', parameters('spokeInfraSubnetName'), 'properties', createObject('addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'properties', createObject('addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix')))), createArray(createObject('name', parameters('spokeApplicationGatewaySubnetName'), 'properties', createObject('addressPrefix', parameters('spokeApplicationGatewaySubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgAppGw-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value)))))), createObject('value', createArray(createObject('name', parameters('spokeInfraSubnetName'), 'properties', createObject('addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'properties', createObject('addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix'))))))]",
                  "vnetAddressPrefixes": {
                    "value": "[parameters('spokeVNetAddressPrefixes')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "10750814407079155041"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 80,
                      "minLength": 2,
                      "metadata": {
                        "description": "Name of the resource Virtual Network (The name must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens)"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Region where the resource will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "key-value pairs as tags, to identify the resource"
                      }
                    },
                    "vnetAddressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Array, CIDRs to be allocated to the new vnet i.e. 192.168.0.0/24"
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Pass an array of objects for all the required subnets"
                      }
                    },
                    "ddosProtectionPlanId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    }
                  },
                  "variables": {
                    "vnetNameMaxLength": 80,
                    "vnetName": "[take(parameters('name'), variables('vnetNameMaxLength'))]",
                    "ddosProtectionPlan": {
                      "id": "[parameters('ddosProtectionPlanId')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2022-07-01",
                      "name": "[variables('vnetName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": "[parameters('vnetAddressPrefixes')]"
                        },
                        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]",
                        "subnets": "[parameters('subnets')]"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "vnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource id of the newly created Virtual network"
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    },
                    "vnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name of the newly created Virtual network"
                      },
                      "value": "[variables('vnetName')]"
                    },
                    "vnetSubnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Outputs the array of the subnets, printing: index, subnetResourceId, subnerName. "
                      },
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": {
                          "subnetIndex": "[copyIndex()]",
                          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-07-01').subnets[copyIndex()].id]",
                          "name": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-07-01').subnets[copyIndex()].name]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgAppGw-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
              ],
              "metadata": {
                "description": "The spoke virtual network in which the workload will run from. This virtual network would normally already be provisioned by your subscription vending process, and only the subnets would need to be configured."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerAppsEnvironmentNsg]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "securityRules": {
                    "value": "[variables('nsgCaeRules').securityRules]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "18411287820228882012"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 80,
                      "metadata": {
                        "description": "Name of the Network Security Group. Alphanumerics, underscores, periods, and hyphens. Start with alphanumeric. End alphanumeric or underscore. "
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Region where the resource will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "key-value pairs as tags, to identify the resource"
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "metadata": {
                        "description": "An array of network security rules. "
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "securityRules": "[parameters('securityRules')]"
                      }
                    }
                  ],
                  "outputs": {
                    "nsgId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource id of the newly created Network Security Group"
                      },
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                    },
                    "nsgName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name of the newly created Network Security Group"
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
              ],
              "metadata": {
                "description": "Network security group rules for the Container Apps cluster."
              }
            },
            {
              "condition": "[not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('nsgAppGw-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGatewayNsg]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "securityRules": {
                    "value": "[variables('nsgAppGwRules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "18411287820228882012"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 80,
                      "metadata": {
                        "description": "Name of the Network Security Group. Alphanumerics, underscores, periods, and hyphens. Start with alphanumeric. End alphanumeric or underscore. "
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Region where the resource will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "key-value pairs as tags, to identify the resource"
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "metadata": {
                        "description": "An array of network security rules. "
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "securityRules": "[parameters('securityRules')]"
                      }
                    }
                  ],
                  "outputs": {
                    "nsgId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource id of the newly created Network Security Group"
                      },
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                    },
                    "nsgName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name of the newly created Network Security Group"
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
              ],
              "metadata": {
                "description": "NSG Rules for the Application Gateway."
              }
            },
            {
              "condition": "[not(empty(parameters('hubVNetId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-peerSpokeToHubDeployment', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "localVnetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
                  },
                  "remoteSubscriptionId": {
                    "value": "[variables('hubSubscriptionId')]"
                  },
                  "remoteRgName": {
                    "value": "[variables('hubResourceGroupName')]"
                  },
                  "remoteVnetName": {
                    "value": "[variables('hubVNetName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "13181302078385014318"
                    }
                  },
                  "parameters": {
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the local Virtual Network"
                      }
                    },
                    "remoteVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the remote Virtual Network"
                      }
                    },
                    "remoteRgName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group of the remote virtual netowrk"
                      }
                    },
                    "remoteSubscriptionId": {
                      "type": "string",
                      "metadata": {
                        "description": "The id of the subscription of the remote virtual netowrk"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/peerTo-{1}', parameters('localVnetName'), parameters('remoteVnetName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowGatewayTransit": false,
                        "allowForwardedTraffic": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(parameters('remoteSubscriptionId'), parameters('remoteRgName'), 'Microsoft.Network/virtualNetworks', parameters('remoteVnetName'))]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Spoke peering to regional hub network. This peering would normally already be provisioned by your subscription vending process."
              }
            },
            {
              "condition": "[not(empty(parameters('hubVNetId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-peerHubToSpokeDeployment', deployment().name), 64)]",
              "subscriptionId": "[variables('hubSubscriptionId')]",
              "resourceGroup": "[variables('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "localVnetName": {
                    "value": "[variables('hubVNetName')]"
                  },
                  "remoteSubscriptionId": {
                    "value": "[last(split(subscription().id, '/'))]"
                  },
                  "remoteRgName": {
                    "value": "[variables('rgSpokeName')]"
                  },
                  "remoteVnetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "13181302078385014318"
                    }
                  },
                  "parameters": {
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the local Virtual Network"
                      }
                    },
                    "remoteVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the remote Virtual Network"
                      }
                    },
                    "remoteRgName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group of the remote virtual netowrk"
                      }
                    },
                    "remoteSubscriptionId": {
                      "type": "string",
                      "metadata": {
                        "description": "The id of the subscription of the remote virtual netowrk"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/peerTo-{1}', parameters('localVnetName'), parameters('remoteVnetName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowGatewayTransit": false,
                        "allowForwardedTraffic": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(parameters('remoteSubscriptionId'), parameters('remoteRgName'), 'Microsoft.Network/virtualNetworks', parameters('remoteVnetName'))]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Regional hub peering to this spoke network. This peering would normally already be provisioned by your subscription vending process."
              }
            }
          ],
          "outputs": {
            "spokeResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke resource group."
              },
              "value": "[variables('rgSpokeName')]"
            },
            "spokeVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the spoke virtual network."
              },
              "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Network/virtualNetworks', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value)]"
            },
            "spokeVNetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke virtual network."
              },
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
            },
            "spokeInfraSubnetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the spoke infrastructure subnet."
              },
              "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Network/virtualNetworks/subnets', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value, parameters('spokeInfraSubnetName'))]"
            },
            "spokeInfraSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke infrastructure subnet."
              },
              "value": "[parameters('spokeInfraSubnetName')]"
            },
            "spokePrivateEndpointsSubnetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the spoke private endpoints subnet."
              },
              "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Network/virtualNetworks/subnets', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value, parameters('spokePrivateEndpointsSubnetName'))]"
            },
            "spokePrivateEndpointsSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke private endpoints subnet."
              },
              "value": "[parameters('spokePrivateEndpointsSubnetName')]"
            },
            "spokeApplicationGatewaySubnetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the spoke Application Gateway subnet. This is '' if the subnet was not created."
              },
              "value": "[if(not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Network/virtualNetworks/subnets', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value, parameters('spokeApplicationGatewaySubnetName')), '')]"
            },
            "spokeApplicationGatewaySubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke Application Gateway subnet.  This is '' if the subnet was not created."
              },
              "value": "[if(not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix'))), parameters('spokeApplicationGatewaySubnetName'), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('supportingServices-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "spokePrivateEndpointSubnetName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokePrivateEndpointsSubnetName.value]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "spokeVNetId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeVNetId.value]"
          },
          "hubVNetId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.hubVNetId.value]"
          },
          "deployRedisCache": {
            "value": "[parameters('deployRedisCache')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "15346428229640726738"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "maxLength": 10,
              "minLength": 2,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created. This needs to be the same region as the spoke."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "hubVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing hub virtual network."
              }
            },
            "spokeVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing spoke virtual network to which the private endpoint will be connected."
              }
            },
            "spokePrivateEndpointSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the existing subnet in the spoke virtual to which the private endpoint will be connected."
              }
            },
            "deployRedisCache": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Deploy Redis cache premium SKU"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(resourceGroup().id)]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "14985913302549051532"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      },
                      "maxLength": 10,
                      "minLength": 2
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "keyVaultUserAssignedIdentity": "[format('{0}-{1}-KeyVaultReader', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('containerRegistry-{0}', uniqueString(resourceGroup().id))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containerRegistryName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerRegistry]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "spokeVNetId": {
                    "value": "[parameters('spokeVNetId')]"
                  },
                  "hubVNetId": {
                    "value": "[parameters('hubVNetId')]"
                  },
                  "spokePrivateEndpointSubnetName": {
                    "value": "[parameters('spokePrivateEndpointSubnetName')]"
                  },
                  "containerRegistryPrivateEndpointName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerRegistryPep]"
                  },
                  "containerRegistryUserAssignedIdentityName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerRegistryUserAssignedIdentity]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "10545735030084056426"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the resources will be created."
                      }
                    },
                    "containerRegistryName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container registry."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "hubVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Hub Virtual Network."
                      }
                    },
                    "spokeVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the VNet to which the private endpoint will be connected."
                      }
                    },
                    "spokePrivateEndpointSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the subnet in the VNet to which the private endpoint will be connected."
                      }
                    },
                    "containerRegistryPrivateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to be created for Azure Container Registry."
                      }
                    },
                    "containerRegistryUserAssignedIdentityName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the user assigned identity to be created to pull image from Azure Container Registry."
                      }
                    }
                  },
                  "variables": {
                    "privateDnsZoneNames": "privatelink.azurecr.io",
                    "containerRegistryResourceName": "registry",
                    "hubVNetIdTokens": "[split(parameters('hubVNetId'), '/')]",
                    "hubSubscriptionId": "[variables('hubVNetIdTokens')[2]]",
                    "hubResourceGroupName": "[variables('hubVNetIdTokens')[4]]",
                    "hubVNetName": "[variables('hubVNetIdTokens')[8]]",
                    "spokeVNetIdTokens": "[split(parameters('spokeVNetId'), '/')]",
                    "spokeSubscriptionId": "[variables('spokeVNetIdTokens')[2]]",
                    "spokeResourceGroupName": "[variables('spokeVNetIdTokens')[4]]",
                    "spokeVNetName": "[variables('spokeVNetIdTokens')[8]]",
                    "containerRegistryPullRoleGuid": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
                    "spokeVNetLinks": [
                      {
                        "vnetName": "[variables('spokeVNetName')]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('spokeVNetName'))]",
                        "registrationEnabled": false
                      },
                      {
                        "vnetName": "[variables('hubVNetName')]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubSubscriptionId'), variables('hubResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVNetName'))]",
                        "registrationEnabled": false
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2022-12-01",
                      "name": "[parameters('containerRegistryName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "Premium"
                      },
                      "properties": {
                        "adminUserEnabled": false,
                        "publicNetworkAccess": "Disabled",
                        "networkRuleBypassOptions": "AzureServices"
                      }
                    },
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('containerRegistryUserAssignedIdentityName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
                      "name": "[guid(subscription().id, resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('containerRegistryUserAssignedIdentityName')))]",
                      "properties": {
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('containerRegistryUserAssignedIdentityName')), '2018-11-30').principalId]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('containerRegistryPullRoleGuid'))]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]",
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('containerRegistryUserAssignedIdentityName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('containerRegistryNetwork-{0}', uniqueString(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "azServicePrivateDnsZoneName": {
                            "value": "[variables('privateDnsZoneNames')]"
                          },
                          "azServiceId": {
                            "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('containerRegistryPrivateEndpointName')]"
                          },
                          "privateEndpointSubResourceName": {
                            "value": "[variables('containerRegistryResourceName')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[variables('spokeVNetLinks')]"
                          },
                          "subnetId": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "15478438910397268748"
                            }
                          },
                          "parameters": {
                            "virtualNetworkLinks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                              }
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource Id of the subnet, where the private endpoint and NIC will be attached to"
                              }
                            },
                            "azServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The Resource Id of Private Link Service. The Resource Id of the Az Resource that we need to attach the Private Endpoint to"
                              }
                            },
                            "azServicePrivateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                              }
                            },
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource name of the Private Endpoint"
                              }
                            },
                            "privateEndpointSubResourceName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "The region (location) in which the resource will be deployed. Default: resource group location."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('azServicePrivateDnsZoneName')]"
                                  },
                                  "virtualNetworkLinks": {
                                    "value": "[parameters('virtualNetworkLinks')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.17.1.54307",
                                      "templateHash": "8461334250568869203"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "virtualNetworkLinks": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                                      }
                                    },
                                    "aRecords": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of A records to be added to the DNS Zone"
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('name')]",
                                      "location": "global",
                                      "tags": "[parameters('tags')]"
                                    },
                                    {
                                      "copy": {
                                        "name": "privateDnsZoneLink",
                                        "count": "[length(parameters('virtualNetworkLinks'))]"
                                      },
                                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                                      "apiVersion": "2018-09-01",
                                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                                      "location": "global",
                                      "properties": {
                                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                                        "virtualNetwork": {
                                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "dnsARecord",
                                        "count": "[length(parameters('aRecords'))]"
                                      },
                                      "type": "Microsoft.Network/privateDnsZones/A",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                                      "properties": {
                                        "ttl": 60,
                                        "aRecords": [
                                          {
                                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "privateDnsZonesId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('privateEndpointDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('privateEndpointName')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "privateDnsZonesId": {
                                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))), '2022-09-01').outputs.privateDnsZonesId.value]"
                                  },
                                  "privateLinkServiceId": {
                                    "value": "[parameters('azServiceId')]"
                                  },
                                  "snetId": {
                                    "value": "[parameters('subnetId')]"
                                  },
                                  "subresource": {
                                    "value": "[parameters('privateEndpointSubResourceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.17.1.54307",
                                      "templateHash": "17714688339806767068"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "maxLength": 64,
                                      "minLength": 2,
                                      "metadata": {
                                        "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "snetId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The subnet resource ID where the nic of the PE will be attached to"
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                                      }
                                    },
                                    "subresource": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                                      }
                                    },
                                    "privateDnsZonesId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "subnet": {
                                          "id": "[parameters('snetId')]"
                                        },
                                        "privateLinkServiceConnections": [
                                          {
                                            "name": "[format('pl-{0}', parameters('name'))]",
                                            "properties": {
                                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                              "groupIds": [
                                                "[parameters('subresource')]"
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                                      "properties": {
                                        "privateDnsZoneConfigs": [
                                          {
                                            "name": "config1",
                                            "properties": {
                                              "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName'))))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "containerRegistryId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the container registry."
                      },
                      "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
                    },
                    "containerRegistryName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container registry."
                      },
                      "value": "[parameters('containerRegistryName')]"
                    },
                    "containerRegistryUserAssignedIdentityId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the user assigned managed identity for the container registry to be able to pull images from it."
                      },
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('containerRegistryUserAssignedIdentityName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Azure Container Registry, where all workload images should be pulled from."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('keyVault-{0}', uniqueString(resourceGroup().id))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.keyVault]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "spokeVNetId": {
                    "value": "[parameters('spokeVNetId')]"
                  },
                  "hubVNetId": {
                    "value": "[parameters('hubVNetId')]"
                  },
                  "spokePrivateEndpointSubnetName": {
                    "value": "[parameters('spokePrivateEndpointSubnetName')]"
                  },
                  "keyVaultPrivateEndpointName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.keyVaultPep]"
                  },
                  "keyVaultUserAssignedIdentityName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.keyVaultUserAssignedIdentity]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "1667118111542117352"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the resources will be created."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Key Vault."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "hubVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Hub Virtual Network."
                      }
                    },
                    "spokeVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the VNet to which the private endpoint will be connected."
                      }
                    },
                    "spokePrivateEndpointSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the subnet in the VNet to which the private endpoint will be connected."
                      }
                    },
                    "keyVaultPrivateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to be created for Key Vault."
                      }
                    },
                    "keyVaultUserAssignedIdentityName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the user assigned identity with Key Vault reader role."
                      }
                    }
                  },
                  "variables": {
                    "privateDnsZoneNames": "privatelink.vaultcore.azure.net",
                    "keyVaultResourceName": "vault",
                    "hubVNetIdTokens": "[split(parameters('hubVNetId'), '/')]",
                    "hubSubscriptionId": "[variables('hubVNetIdTokens')[2]]",
                    "hubResourceGroupName": "[variables('hubVNetIdTokens')[4]]",
                    "hubVNetName": "[variables('hubVNetIdTokens')[8]]",
                    "spokeVNetIdTokens": "[split(parameters('spokeVNetId'), '/')]",
                    "spokeSubscriptionId": "[variables('spokeVNetIdTokens')[2]]",
                    "spokeResourceGroupName": "[variables('spokeVNetIdTokens')[4]]",
                    "spokeVNetName": "[variables('spokeVNetIdTokens')[8]]",
                    "keyvaultReaderRoleGuid": "21090545-7ca7-4776-b22c-e363652d74d2",
                    "spokeVNetLinks": [
                      {
                        "vnetName": "[variables('spokeVNetName')]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('spokeVNetName'))]",
                        "registrationEnabled": false
                      },
                      {
                        "vnetName": "[variables('hubVNetName')]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubSubscriptionId'), variables('hubResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVNetName'))]",
                        "registrationEnabled": false
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "tenantId": "[subscription().tenantId]",
                        "sku": {
                          "family": "A",
                          "name": "standard"
                        },
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny"
                        },
                        "enableSoftDelete": false,
                        "softDeleteRetentionInDays": 7,
                        "enablePurgeProtection": null,
                        "publicNetworkAccess": "Disabled",
                        "enableRbacAuthorization": true,
                        "enabledForTemplateDeployment": true
                      }
                    },
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('keyVaultUserAssignedIdentityName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                      "name": "[guid(subscription().id, resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('keyVaultUserAssignedIdentityName')))]",
                      "properties": {
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('keyVaultUserAssignedIdentityName')), '2018-11-30').principalId]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('keyvaultReaderRoleGuid'))]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('keyVaultUserAssignedIdentityName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('keyVaultNetwork-{0}', uniqueString(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "azServicePrivateDnsZoneName": {
                            "value": "[variables('privateDnsZoneNames')]"
                          },
                          "azServiceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('keyVaultPrivateEndpointName')]"
                          },
                          "privateEndpointSubResourceName": {
                            "value": "[variables('keyVaultResourceName')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[variables('spokeVNetLinks')]"
                          },
                          "subnetId": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "15478438910397268748"
                            }
                          },
                          "parameters": {
                            "virtualNetworkLinks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                              }
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource Id of the subnet, where the private endpoint and NIC will be attached to"
                              }
                            },
                            "azServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The Resource Id of Private Link Service. The Resource Id of the Az Resource that we need to attach the Private Endpoint to"
                              }
                            },
                            "azServicePrivateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                              }
                            },
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource name of the Private Endpoint"
                              }
                            },
                            "privateEndpointSubResourceName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "The region (location) in which the resource will be deployed. Default: resource group location."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('azServicePrivateDnsZoneName')]"
                                  },
                                  "virtualNetworkLinks": {
                                    "value": "[parameters('virtualNetworkLinks')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.17.1.54307",
                                      "templateHash": "8461334250568869203"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "virtualNetworkLinks": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                                      }
                                    },
                                    "aRecords": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of A records to be added to the DNS Zone"
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('name')]",
                                      "location": "global",
                                      "tags": "[parameters('tags')]"
                                    },
                                    {
                                      "copy": {
                                        "name": "privateDnsZoneLink",
                                        "count": "[length(parameters('virtualNetworkLinks'))]"
                                      },
                                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                                      "apiVersion": "2018-09-01",
                                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                                      "location": "global",
                                      "properties": {
                                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                                        "virtualNetwork": {
                                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "dnsARecord",
                                        "count": "[length(parameters('aRecords'))]"
                                      },
                                      "type": "Microsoft.Network/privateDnsZones/A",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                                      "properties": {
                                        "ttl": 60,
                                        "aRecords": [
                                          {
                                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "privateDnsZonesId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('privateEndpointDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('privateEndpointName')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "privateDnsZonesId": {
                                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))), '2022-09-01').outputs.privateDnsZonesId.value]"
                                  },
                                  "privateLinkServiceId": {
                                    "value": "[parameters('azServiceId')]"
                                  },
                                  "snetId": {
                                    "value": "[parameters('subnetId')]"
                                  },
                                  "subresource": {
                                    "value": "[parameters('privateEndpointSubResourceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.17.1.54307",
                                      "templateHash": "17714688339806767068"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "maxLength": 64,
                                      "minLength": 2,
                                      "metadata": {
                                        "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "snetId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The subnet resource ID where the nic of the PE will be attached to"
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                                      }
                                    },
                                    "subresource": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                                      }
                                    },
                                    "privateDnsZonesId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "subnet": {
                                          "id": "[parameters('snetId')]"
                                        },
                                        "privateLinkServiceConnections": [
                                          {
                                            "name": "[format('pl-{0}', parameters('name'))]",
                                            "properties": {
                                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                              "groupIds": [
                                                "[parameters('subresource')]"
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                                      "properties": {
                                        "privateDnsZoneConfigs": [
                                          {
                                            "name": "config1",
                                            "properties": {
                                              "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName'))))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyVaultId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key vault."
                      },
                      "value": "[parameters('keyVaultName')]"
                    },
                    "keyVaultUserAssignedIdentityId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the user assigned managed identity to access the key vault."
                      },
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('keyVaultUserAssignedIdentityName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Azure Key Vault used to hold items like TLS certs and application secrets that your workload will need."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('logAnalyticsWs-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.logAnalyticsWorkspace]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "3888572269456304541"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 4,
                      "metadata": {
                        "description": "Required. Name of the Log Analytics Workspace Service. It must be between 4 and 63 characters and can contain only letters, numbers and \"-\". The \"-\" should not be the first or the last symbol"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region where the resources will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "serviceTier": {
                      "type": "string",
                      "defaultValue": "PerGB2018",
                      "allowedValues": [
                        "Free",
                        "Standalone",
                        "PerNode",
                        "PerGB2018"
                      ],
                      "metadata": {
                        "description": "Optional. Service Tier: PerGB2018, Free, Standalone, PerGB or PerNode."
                      }
                    },
                    "dataRetention": {
                      "type": "int",
                      "defaultValue": 90,
                      "maxValue": 730,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional, default 90. Number of days data will be retained for."
                      }
                    },
                    "publicNetworkAccessForIngestion": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics ingestion."
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics query."
                      }
                    },
                    "useResourcePermissions": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
                      }
                    }
                  },
                  "variables": {
                    "lawsMaxLength": 63,
                    "lawsNameSantized": "[replace(replace(parameters('name'), '_', '-'), '.', '-')]",
                    "lawsName": "[if(greater(length(variables('lawsNameSantized')), variables('lawsMaxLength')), substring(variables('lawsNameSantized'), 0, variables('lawsMaxLength')), variables('lawsNameSantized'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[variables('lawsName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "retentionInDays": "[parameters('dataRetention')]",
                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                        "sku": {
                          "name": "[parameters('serviceTier')]"
                        },
                        "features": {
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWsName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource."
                      },
                      "value": "[variables('lawsName')]"
                    },
                    "logAnalyticsWsId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the resource."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('lawsName'))]"
                    },
                    "customerId": {
                      "type": "string",
                      "metadata": {
                        "description": "The customer id of the log analytics workspace."
                      },
                      "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('lawsName')), '2022-10-01').customerId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "The log sink for Azure Diagnostics"
              }
            },
            {
              "condition": "[parameters('deployRedisCache')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('redisCache-{0}', uniqueString(resourceGroup().id))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "redisName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.redisCache]"
                  },
                  "logAnalyticsWsId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.logAnalyticsWsId.value]"
                  },
                  "keyVaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.keyVaultName.value]"
                  },
                  "spokeVNetId": {
                    "value": "[parameters('spokeVNetId')]"
                  },
                  "hubVNetId": {
                    "value": "[parameters('hubVNetId')]"
                  },
                  "spokePrivateEndpointSubnetName": {
                    "value": "[parameters('spokePrivateEndpointSubnetName')]"
                  },
                  "redisCachePrivateEndpointName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.redisCachePep]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "604222685683593390"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the resources will be created. This needs to be the same region as the spoke."
                      }
                    },
                    "redisName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the redis cache to be created."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "hubVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Hub Virtual Network."
                      }
                    },
                    "spokeVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the VNet to which the private endpoint will be connected."
                      }
                    },
                    "spokePrivateEndpointSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the subnet in the VNet to which the private endpoint will be connected."
                      }
                    },
                    "redisCachePrivateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to be created for Redis Cache."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed key vault"
                      }
                    },
                    "logAnalyticsWsId": {
                      "type": "string",
                      "metadata": {
                        "description": "Log Analytics Workspace Id"
                      }
                    }
                  },
                  "variables": {
                    "privateDnsZoneNames": "privatelink.redis.cache.windows.net",
                    "redisResourceName": "redisCache",
                    "hubVNetIdTokens": "[split(parameters('hubVNetId'), '/')]",
                    "hubSubscriptionId": "[variables('hubVNetIdTokens')[2]]",
                    "hubResourceGroupName": "[variables('hubVNetIdTokens')[4]]",
                    "hubVNetName": "[variables('hubVNetIdTokens')[8]]",
                    "spokeVNetIdTokens": "[split(parameters('spokeVNetId'), '/')]",
                    "spokeSubscriptionId": "[variables('spokeVNetIdTokens')[2]]",
                    "spokeResourceGroupName": "[variables('spokeVNetIdTokens')[4]]",
                    "spokeVNetName": "[variables('spokeVNetIdTokens')[8]]",
                    "spokeVNetLinks": [
                      {
                        "vnetName": "[variables('spokeVNetName')]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('spokeVNetName'))]",
                        "registrationEnabled": false
                      },
                      {
                        "vnetName": "[variables('hubVNetName')]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubSubscriptionId'), variables('hubResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVNetName'))]",
                        "registrationEnabled": false
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('redis-{0}', uniqueString(resourceGroup().id))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('redisName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "keyvaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "enableNonSslPort": {
                            "value": false
                          },
                          "skuName": {
                            "value": "Premium"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('logAnalyticsWsId')]"
                          },
                          "hasPrivateLink": {
                            "value": true
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "9375885309875252836"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 63,
                              "metadata": {
                                "description": "Required. The name of the Redis cache resource. Start and end with alphanumeric. Consecutive hyphens not allowed"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location to deploy the Redis cache service."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "keyvaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of an existing keyvault, that it will be used to store secrets (connection string)"
                              }
                            },
                            "enableNonSslPort": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether the non-ssl Redis server port (6379) is enabled."
                              }
                            },
                            "redisConfiguration": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc."
                              }
                            },
                            "replicasPerMaster": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "Optional. The number of replicas to be created per primary."
                              },
                              "minValue": 1
                            },
                            "replicasPerPrimary": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "Optional. The number of replicas to be created per primary."
                              },
                              "minValue": 1
                            },
                            "shardCount": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "Optional. The number of shards to be created on a Premium Cluster Cache."
                              },
                              "minValue": 1
                            },
                            "capacity": {
                              "type": "int",
                              "defaultValue": 2,
                              "metadata": {
                                "description": "Optional. The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4)."
                              },
                              "allowedValues": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                              ]
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Standard",
                              "metadata": {
                                "description": "Optional, default is Standard. The type of Redis cache to deploy."
                              },
                              "allowedValues": [
                                "Basic",
                                "Premium",
                                "Standard"
                              ]
                            },
                            "subnetId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "allLogs"
                              ],
                              "allowedValues": [
                                "allLogs",
                                "ConnectedClientList"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "hasPrivateLink": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Has the resource private endpoint?"
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogsSpecified",
                                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                                "input": {
                                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ],
                            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true(), 'retentionPolicy', createObject('enabled', true(), 'days', parameters('diagnosticLogsRetentionInDays')))), variables('diagnosticsLogsSpecified'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Cache/redis",
                              "apiVersion": "2022-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "enableNonSslPort": "[parameters('enableNonSslPort')]",
                                "minimumTlsVersion": "1.2",
                                "publicNetworkAccess": "[if(parameters('hasPrivateLink'), 'Disabled', null())]",
                                "redisConfiguration": "[if(not(empty(parameters('redisConfiguration'))), parameters('redisConfiguration'), null())]",
                                "redisVersion": "6",
                                "replicasPerMaster": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerMaster'), null())]",
                                "replicasPerPrimary": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerPrimary'), null())]",
                                "shardCount": "[if(equals(parameters('skuName'), 'Premium'), parameters('shardCount'), null())]",
                                "sku": {
                                  "capacity": "[parameters('capacity')]",
                                  "family": "[if(equals(parameters('skuName'), 'Premium'), 'P', 'C')]",
                                  "name": "[parameters('skuName')]"
                                },
                                "subnetId": "[if(not(empty(parameters('subnetId'))), parameters('subnetId'), null())]"
                              },
                              "zones": "[if(equals(parameters('skuName'), 'Premium'), pickZones('Microsoft.Cache', 'redis', parameters('location'), 1), null())]"
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2023-02-01",
                              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'redisConStrSecret')]",
                              "properties": {
                                "value": "[format('{0},password={1},ssl=True,abortConnect=False', reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').hostName, listKeys(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').primaryKey)]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[not(empty(parameters('diagnosticWorkspaceId')))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Cache/redis/{0}', parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": null,
                                "workspaceId": "[if(empty(parameters('diagnosticWorkspaceId')), null(), parameters('diagnosticWorkspaceId'))]",
                                "eventHubAuthorizationRuleId": null,
                                "eventHubName": null,
                                "metrics": "[if(empty(parameters('diagnosticWorkspaceId')), null(), variables('diagnosticsMetrics'))]",
                                "logs": "[if(empty(parameters('diagnosticWorkspaceId')), null(), variables('diagnosticsLogs'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource name."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID."
                              },
                              "value": "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the Redis cache was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "hostName": {
                              "type": "string",
                              "metadata": {
                                "description": "Redis hostname."
                              },
                              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').hostName]"
                            },
                            "sslPort": {
                              "type": "int",
                              "metadata": {
                                "description": "Redis SSL port."
                              },
                              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').sslPort]"
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "The full resource ID of a subnet in a virtual network where the Redis cache was deployed in."
                              },
                              "value": "[if(not(empty(parameters('subnetId'))), reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').subnetId, '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01', 'full').location]"
                            },
                            "redisConnectionStringSecretName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the secret in keyvault, holding the connection string to redis."
                              },
                              "value": "redisConStrSecret"
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Azure Redis Cache used for your workload."
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('redisPrivateNetworking-{0}', uniqueString(resourceGroup().id))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "azServiceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('redis-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.resourceId.value]"
                          },
                          "azServicePrivateDnsZoneName": {
                            "value": "[variables('privateDnsZoneNames')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('redisCachePrivateEndpointName')]"
                          },
                          "privateEndpointSubResourceName": {
                            "value": "[variables('redisResourceName')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[variables('spokeVNetLinks')]"
                          },
                          "subnetId": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "15478438910397268748"
                            }
                          },
                          "parameters": {
                            "virtualNetworkLinks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                              }
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource Id of the subnet, where the private endpoint and NIC will be attached to"
                              }
                            },
                            "azServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The Resource Id of Private Link Service. The Resource Id of the Az Resource that we need to attach the Private Endpoint to"
                              }
                            },
                            "azServicePrivateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                              }
                            },
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource name of the Private Endpoint"
                              }
                            },
                            "privateEndpointSubResourceName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "The region (location) in which the resource will be deployed. Default: resource group location."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('azServicePrivateDnsZoneName')]"
                                  },
                                  "virtualNetworkLinks": {
                                    "value": "[parameters('virtualNetworkLinks')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.17.1.54307",
                                      "templateHash": "8461334250568869203"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "virtualNetworkLinks": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                                      }
                                    },
                                    "aRecords": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of A records to be added to the DNS Zone"
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('name')]",
                                      "location": "global",
                                      "tags": "[parameters('tags')]"
                                    },
                                    {
                                      "copy": {
                                        "name": "privateDnsZoneLink",
                                        "count": "[length(parameters('virtualNetworkLinks'))]"
                                      },
                                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                                      "apiVersion": "2018-09-01",
                                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                                      "location": "global",
                                      "properties": {
                                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                                        "virtualNetwork": {
                                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "dnsARecord",
                                        "count": "[length(parameters('aRecords'))]"
                                      },
                                      "type": "Microsoft.Network/privateDnsZones/A",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                                      "properties": {
                                        "ttl": 60,
                                        "aRecords": [
                                          {
                                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "privateDnsZonesId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('privateEndpointDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('privateEndpointName')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "privateDnsZonesId": {
                                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))), '2022-09-01').outputs.privateDnsZonesId.value]"
                                  },
                                  "privateLinkServiceId": {
                                    "value": "[parameters('azServiceId')]"
                                  },
                                  "snetId": {
                                    "value": "[parameters('subnetId')]"
                                  },
                                  "subresource": {
                                    "value": "[parameters('privateEndpointSubResourceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.17.1.54307",
                                      "templateHash": "17714688339806767068"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "maxLength": 64,
                                      "minLength": 2,
                                      "metadata": {
                                        "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "snetId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The subnet resource ID where the nic of the PE will be attached to"
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                                      }
                                    },
                                    "subresource": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                                      }
                                    },
                                    "privateDnsZonesId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "subnet": {
                                          "id": "[parameters('snetId')]"
                                        },
                                        "privateLinkServiceConnections": [
                                          {
                                            "name": "[format('pl-{0}', parameters('name'))]",
                                            "properties": {
                                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                              "groupIds": [
                                                "[parameters('subresource')]"
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                                      "properties": {
                                        "privateDnsZoneConfigs": [
                                          {
                                            "name": "config1",
                                            "properties": {
                                              "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName'))))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('redis-{0}', uniqueString(resourceGroup().id)))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "redisCacheSecretKey": {
                      "type": "string",
                      "metadata": {
                        "description": "The secret name to retrieve the connection string from KeyVault"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('redis-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.redisConnectionStringSecretName.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(resourceGroup().id)))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', uniqueString(resourceGroup().id)), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ]
            }
          ],
          "outputs": {
            "containerRegistryId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Container Registry."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistry-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.containerRegistryId.value]"
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Container Registry."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistry-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.containerRegistryName.value]"
            },
            "containerRegistryUserAssignedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the user-assigned managed identity for the Azure Container Registry to be able to pull images from it."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistry-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.containerRegistryUserAssignedIdentityId.value]"
            },
            "keyVaultId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Key Vault."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.keyVaultId.value]"
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Key Vault."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.keyVaultName.value]"
            },
            "keyVaultUserAssignedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the user-assigned managed identity to read from Azure Key Vault."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.keyVaultUserAssignedIdentityId.value]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Log Analytics Workspace."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.logAnalyticsWsId.value]"
            },
            "redisCacheSecretKey": {
              "type": "string",
              "metadata": {
                "description": "The secret name to retrieve the connection string from KeyVault"
              },
              "value": "[if(parameters('deployRedisCache'), reference(resourceId('Microsoft.Resources/deployments', format('redisCache-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.redisCacheSecretKey.value, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "hubVNetId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.hubVNetId.value]"
          },
          "spokeVNetName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeVNetName.value]"
          },
          "spokeInfraSubnetName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeInfraSubnetName.value]"
          },
          "enableApplicationInsights": {
            "value": "[parameters('enableApplicationInsights')]"
          },
          "enableDaprInstrumentation": {
            "value": "[parameters('enableDaprInstrumentation')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "18441024042217970394"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "maxLength": 10,
              "minLength": 2,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created. This needs to be the same region as the spoke."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "hubVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing hub virtual network."
              }
            },
            "spokeVNetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the existing spoke virtual network."
              }
            },
            "spokeInfraSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the existing spoke infrastructure subnet."
              }
            },
            "enableApplicationInsights": {
              "type": "bool",
              "metadata": {
                "description": "Enable or disable the createion of Application Insights."
              }
            },
            "enableDaprInstrumentation": {
              "type": "bool",
              "metadata": {
                "description": "Enable or disable Dapr application instrumentation using Application Insights. If enableApplicationInsights is false, this parameter is ignored."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable sending usage and telemetry feedback to Microsoft."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource id of an existing Azure Log Analytics Workspace."
              }
            }
          },
          "variables": {
            "hubVNetResourceIdTokens": "[if(not(empty(parameters('hubVNetId'))), split(parameters('hubVNetId'), '/'), array(''))]",
            "hubSubscriptionId": "[variables('hubVNetResourceIdTokens')[2]]",
            "hubResourceGroupName": "[variables('hubVNetResourceIdTokens')[4]]",
            "hubVNetName": "[variables('hubVNetResourceIdTokens')[8]]",
            "telemetryId": "[format('9b4433d6-924a-4c07-b47c-7478619759c7-{0}-acasb', parameters('location'))]"
          },
          "resources": [
            {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[variables('telemetryId')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": {}
                }
              },
              "metadata": {
                "description": "Microsoft telemetry deployment."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('04-sharedNamingDeployment-{0}', deployment().name), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(resourceGroup().id)]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "14985913302549051532"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      },
                      "maxLength": 10,
                      "minLength": 2
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "keyVaultUserAssignedIdentity": "[format('{0}-{1}-KeyVaultReader', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "condition": "[parameters('enableApplicationInsights')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('applicationInsights-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('04-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationInsights]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "workspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "7311810097849381847"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Application Insights."
                      }
                    },
                    "appInsightsType": {
                      "type": "string",
                      "defaultValue": "web",
                      "allowedValues": [
                        "web",
                        "other"
                      ],
                      "metadata": {
                        "description": "Optional. Application type."
                      }
                    },
                    "workspaceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the log analytics workspace which the data will be ingested to. If left empty, applicationInsights will create one for us. This property is required to create an application with this API version. Applications from older versions will not have this property."
                      }
                    },
                    "publicNetworkAccessForIngestion": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled."
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled."
                      }
                    },
                    "retentionInDays": {
                      "type": "int",
                      "defaultValue": 90,
                      "allowedValues": [
                        30,
                        60,
                        90,
                        120,
                        180,
                        270,
                        365,
                        550,
                        730
                      ],
                      "metadata": {
                        "description": "Optional. Retention period in days."
                      }
                    },
                    "samplingPercentage": {
                      "type": "int",
                      "defaultValue": 100,
                      "maxValue": 100,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "Application_Type": "[parameters('appInsightsType')]",
                        "Request_Source": "rest",
                        "WorkspaceResourceId": "[parameters('workspaceResourceId')]",
                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                        "RetentionInDays": "[parameters('retentionInDays')]",
                        "SamplingPercentage": "[parameters('samplingPercentage')]"
                      }
                    }
                  ],
                  "outputs": {
                    "appInsNname": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the application insights component."
                      },
                      "value": "[parameters('name')]"
                    },
                    "appInsResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the application insights component."
                      },
                      "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                    },
                    "appInsInstrumentationKey": {
                      "type": "string",
                      "metadata": {
                        "description": "The applicationInsights Instrumentation Key."
                      },
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').InstrumentationKey]"
                    },
                    "appInsConnectionString": {
                      "type": "string",
                      "metadata": {
                        "description": "The applicationInsights Connection String."
                      },
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
                    },
                    "applicationId": {
                      "type": "string",
                      "metadata": {
                        "description": "The application ID of the application insights component."
                      },
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').AppId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('04-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Azure Application Insights, the workload' log & metric sink and APM tool"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('containerAppsEnvironment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('04-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerAppsEnvironment]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "logAnalyticsWsResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "subnetId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('spokeVNetName'), parameters('spokeInfraSubnetName'))]"
                  },
                  "vnetEndpointInternal": {
                    "value": true
                  },
                  "appInsightsInstrumentationKey": "[if(and(parameters('enableApplicationInsights'), parameters('enableDaprInstrumentation')), createObject('value', reference(resourceId('Microsoft.Resources/deployments', take(format('applicationInsights-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.appInsInstrumentationKey.value), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "15153833916265091433"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of your Azure Container Apps Environment. "
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "zoneRedundant": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional, default value is false. Sets if the environment will use availability zones. Your Container App Environment and the apps in it will be zone redundant. This requieres vNet integration."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Consumption",
                      "allowedValues": [
                        "Consumption",
                        "Premium"
                      ],
                      "metadata": {
                        "description": "Mandatory, default is Consumption"
                      }
                    },
                    "vnetEndpointInternal": {
                      "type": "bool",
                      "metadata": {
                        "description": "If true, the endpoint is an internal load balancer. If false the hosted apps are exposed on an internet-accessible IP address "
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Custome vnet configuration for the nevironment. NOTE: Current GA (Feb 2023): The subnet associated with a Container App Environment requires a CIDR prefix of /23 or larger"
                      }
                    },
                    "logAnalyticsWsResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "mandatory for log-analytics"
                      }
                    },
                    "appInsightsInstrumentationKey": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "optional, default is empty. App Insights instrumentation key provided to Dapr for tracing"
                      }
                    }
                  },
                  "variables": {
                    "lawsSplitTokens": "[if(not(empty(parameters('logAnalyticsWsResourceId'))), split(parameters('logAnalyticsWsResourceId'), '/'), array(''))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2022-10-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "zoneRedundant": "[parameters('zoneRedundant')]",
                        "daprAIInstrumentationKey": "[parameters('appInsightsInstrumentationKey')]",
                        "vnetConfiguration": {
                          "internal": "[parameters('vnetEndpointInternal')]",
                          "infrastructureSubnetId": "[parameters('subnetId')]"
                        },
                        "appLogsConfiguration": {
                          "destination": "log-analytics",
                          "logAnalyticsConfiguration": {
                            "customerId": "[if(not(empty(parameters('logAnalyticsWsResourceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('lawsSplitTokens')[2], variables('lawsSplitTokens')[4]), 'Microsoft.OperationalInsights/workspaces', variables('lawsSplitTokens')[8]), '2022-10-01').customerId, null())]",
                            "sharedKey": "[if(not(empty(parameters('logAnalyticsWsResourceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('lawsSplitTokens')[2], variables('lawsSplitTokens')[4]), 'Microsoft.OperationalInsights/workspaces', variables('lawsSplitTokens')[8]), '2022-10-01').primarySharedKey, null())]"
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "containerAppsEnvironmentName": {
                      "type": "string",
                      "metadata": {
                        "description": "The Name of the Azure container app environment."
                      },
                      "value": "[parameters('name')]"
                    },
                    "containerAppsEnvironmentNameId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Azure container app environment."
                      },
                      "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
                    },
                    "containerAppsEnvironmentDefaultDomain": {
                      "type": "string",
                      "metadata": {
                        "description": "The default domain of the Azure container app environment."
                      },
                      "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2022-10-01').defaultDomain]"
                    },
                    "containerAppsEnvironmentLoadBalancerIP": {
                      "type": "string",
                      "metadata": {
                        "description": "The Azure container app environment's Load Balancer IP."
                      },
                      "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2022-10-01').staticIp]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('applicationInsights-{0}', uniqueString(resourceGroup().id)), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('04-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "The Azure Container Apps (ACA) cluster."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('containerAppsEnvironmentPrivateDnsZone-{0}', uniqueString(resourceGroup().id))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.containerAppsEnvironmentDefaultDomain.value]"
                  },
                  "virtualNetworkLinks": {
                    "value": [
                      {
                        "vnetName": "[parameters('spokeVNetName')]",
                        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', parameters('spokeVNetName'))]",
                        "registrationEnabled": false
                      },
                      {
                        "vnetName": "[variables('hubVNetName')]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubSubscriptionId'), variables('hubResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVNetName'))]",
                        "registrationEnabled": false
                      }
                    ]
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "aRecords": {
                    "value": [
                      {
                        "name": "*",
                        "ipv4Address": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.containerAppsEnvironmentLoadBalancerIP.value]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "8461334250568869203"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    },
                    "aRecords": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of A records to be added to the DNS Zone"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneLink",
                        "count": "[length(parameters('virtualNetworkLinks'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2018-09-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dnsARecord",
                        "count": "[length(parameters('aRecords'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                      "properties": {
                        "ttl": 60,
                        "aRecords": [
                          {
                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZonesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}', uniqueString(resourceGroup().id)), 64))]"
              ],
              "metadata": {
                "description": "The Private DNS zone containing the ACA load balancer IP"
              }
            }
          ],
          "outputs": {
            "containerAppsEnvironmentId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Container Apps environment."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.containerAppsEnvironmentNameId.value]"
            },
            "containerAppsEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Container Apps environment."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.containerAppsEnvironmentName.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64))]"
      ]
    },
    {
      "condition": "[parameters('deployHelloWorldSample')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('helloWorlSampleApp-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "containerRegistryUserAssignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryUserAssignedIdentityId.value]"
          },
          "containerAppsEnvironmentId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerAppsEnvironmentId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "15025788095162643616"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created. This needs to be the same region as the Azure Container Apps instances."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "helloWorldContainerAppName": {
              "type": "string",
              "defaultValue": "ca-simple-hello",
              "maxLength": 32,
              "minLength": 2,
              "metadata": {
                "description": "Optional. The name of the Container App. If set, it overrides the name generated by the template."
              }
            },
            "containerRegistryUserAssignedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing user-assigned managed identity to be assigned to the Container App to be able to pull images from the container registry."
              }
            },
            "containerAppsEnvironmentId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing Container Apps environment in which the Container App will be deployed."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2022-10-01",
              "name": "[parameters('helloWorldContainerAppName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('containerRegistryUserAssignedIdentityId'))]": {}
                }
              },
              "properties": {
                "configuration": {
                  "activeRevisionsMode": "single",
                  "ingress": {
                    "allowInsecure": false,
                    "external": true,
                    "targetPort": 80,
                    "transport": "auto"
                  },
                  "registries": [],
                  "secrets": []
                },
                "environmentId": "[parameters('containerAppsEnvironmentId')]",
                "template": {
                  "containers": [
                    {
                      "name": "simple-hello",
                      "image": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest",
                      "resources": {
                        "cpu": "[json('0.25')]",
                        "memory": "0.5Gi"
                      }
                    }
                  ],
                  "scale": {
                    "minReplicas": 1,
                    "maxReplicas": 10
                  },
                  "volumes": []
                }
              },
              "metadata": {
                "description": "The \"Hello World\" Container App."
              }
            }
          ],
          "outputs": {
            "helloWorldAppFqdn": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the \"Hello World\" Container App."
              },
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('helloWorldContainerAppName')), '2022-10-01').configuration.ingress.fqdn]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64))]"
      ]
    },
    {
      "condition": "[parameters('deployHelloWorldSample')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('applicationGateway-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "applicationGatewayCertificateKeyName": {
            "value": "[parameters('applicationGatewayCertificateKeyName')]"
          },
          "applicationGatewayFqdn": {
            "value": "[parameters('applicationGatewayFqdn')]"
          },
          "applicationGatewayPrimaryBackendEndFqdn": "[if(parameters('deployHelloWorldSample'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('helloWorlSampleApp-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.helloWorldAppFqdn.value), createObject('value', ''))]",
          "applicationGatewaySubnetId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeApplicationGatewaySubnetId.value]"
          },
          "enableApplicationGatewayCertificate": {
            "value": "[parameters('enableApplicationGatewayCertificate')]"
          },
          "keyVaultId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.keyVaultId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "10387356517610375308"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "maxLength": 10,
              "minLength": 2,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created. This needs to be the same region as the spoke."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "applicationGatewayFqdn": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the Application Gateawy. Must match the TLS certificate."
              }
            },
            "applicationGatewaySubnetId": {
              "type": "string",
              "metadata": {
                "description": "The existing subnet resource ID to use for Application Gateway."
              }
            },
            "applicationGatewayPrimaryBackendEndFqdn": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the primary backend endpoint."
              }
            },
            "appGatewayBackendHealthProbePath": {
              "type": "string",
              "defaultValue": "/",
              "metadata": {
                "description": "The path to use for Application Gateway's backend health probe."
              }
            },
            "enableApplicationGatewayCertificate": {
              "type": "bool",
              "metadata": {
                "description": "Enable or disable Application Gateway certificate (PFX)."
              }
            },
            "applicationGatewayCertificateKeyName": {
              "type": "string",
              "metadata": {
                "description": "The name of the certificate key to use for Application Gateway certificate."
              }
            },
            "applicationGatewayLogAnalyticsId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource ID of the exsiting Log Analytics workload for diagnostic settngs, or nothing if you don't need any."
              }
            },
            "keyVaultId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing Key Vault which contains Application Gateway's cert."
              }
            }
          },
          "variables": {
            "$fxv#0": "MIIKbwIBAzCCCiUGCSqGSIb3DQEHAaCCChYEggoSMIIKDjCCBIIGCSqGSIb3DQEHBqCCBHMwggRvAgEAMIIEaAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAib0WJNTWKS7AICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEHW9eewF9XfBaswcMEeJDKGAggQAPp4/eKGKvqc14RcyYpHwyrMnKmI1B9zu4Up0HZt8HdSKvGtlpQx488J516i/nvJuOjuPhDGTdCCHHM70r+ythml4h1k3OEXqUFeR9U9ENJY8GwMgjKjF1Dw1ZI7HtXsPHLlH6uthTqfLJXRkbSh1JDxyQEV7jMI54X5cy1nvenXhJ39xjk/ZhK2BouZnxxaK6r/x4vLCVqwnvvcmaAG53cF8k0oPcdxdoHnE3yQRrBEPJjHmfufZ6BpqXMfV3qRbDid2UoakEhyzLnCbh9UsT/i4BzBvzPoApDY03OM9MLc3r3+BCLjfFSdVsXKf1/+0ZbPP/T6ex1o57E2k1dCWAYNLUTG1dMoEfh8qJ7iNw18RWwvgzQTCVYDAHrMt1FVrjncS1rKQ91SR0lx7UqiOVRL5hH5q6zLJwelQ8AMij7bq8sMMqQnnNudX1XqE5eWzSCFU+qFTx1aegzve98on3NRIjdDhGs0I8fmCSFQ1JQiteMIpHwSVeSf2EJqfI+1ORrDw5FqVGCgUcjD4hNXylVutwzHvqogvL88ktMQuuzBlTO+JJtRBjMakcYaWHm3pTlc/6FYbAOQq9NeiKLreo3Onvd6VUPFhSaTxj6Yc+QVEMTNlvu2fD4aF49XlsNXiYD89Hppgjzyq+65rcWP3X0B4FKRZBgp3T11iTdsMZvjsFWeWQ8S7tfbGGiff4xo8JktKzA/lN8exZEQqccMUWKNUkL5ovWjuLlhVOroUeFE56fseI3CVcfgSOk9C7d21vbP/+sY5lZAKCHguX1w+Qsrw2rGpKXhF8bEPPjEAC4X/qw6YfxZSbP5YSs7fCqJtDLi8aaNUo8U90yAOwDoCPNJNb4IkCiuXrMAFND9p7+lFZe3L0CPO8Zc3XmV78xVHoHpQ3Gp2cEMBWpQULEj2m/FBnLOjbQ0o8mRQFdKbHfX8kvCPAVpqFFCei4+XyypMjAu4v6N6nJm3Ze4PPu0TTBEbS9Bo0mKjLDXtob1GqsStQ74SuwAokqGJyJSwTP9gaAuAFmdf56FRnIR0MvdT7eTe4I5q3VOZWWPl6zMs8MaP9lRSom8CaBK97N5n427VE0YaAERTies071M7j1/z5TavAYcde4w8phrnkE+PQpZbg0dIgINBrQAWOu5fUBLj6Y2JWudNn5h7bNMuU6RPRsJHf8nY13GBFVyoRfeXHSLE09GQ2EkOn/PslDYyKIIDnhVFKFLwGQSuGnmWMRTYd0Li9NN9PzKewrStwuEMW7Qwh2Gs4Zj7XUkCSmpX5eUQ9S09Zugo+G7vF6HdedN4HTcPpccaZ9kz6A+iEAxxWKSYkJXAmpss2Ol7D6Gl49zAexyrffIL9r0dYKZM7O+i7jCCBYQGCSqGSIb3DQEHAaCCBXUEggVxMIIFbTCCBWkGCyqGSIb3DQEMCgECoIIFMTCCBS0wVwYJKoZIhvcNAQUNMEowKQYJKoZIhvcNAQUMMBwECKJcTO/NpFybAgIIADAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQ3lO4+tUQ8LNz1gjulWNrpQSCBNAt6xylV++Av6DETcLjtNObdmwya3/twJsa58rW+VZTF3juXoskqDcWG3x9d2TIVySedo8K6ou5dzxPsyky+5+/hXMlYdjmXpboYL90tRg4ysjXsYmFxpEm8tcTv6pC58ayynB0d80Be1OwnMMCUhYYnj+4opFd6xK+Xehm//5XOUD3jyk9BfxptBrGyPG+halNhHnqbP7w1fv/eNRLXOGS5Uoaq7e5GwiIAHXyOiC3CDfEgtiZisGXKC5JRHYDt+gsjqwowmYF/x21etsJf79z1zx0F5Eu+V5BYaQ8sLevW5pnxwX2WvQ75gL9slICcyzt5NQ3i7qAzF/me0z6MmMXrsP+4QsC84xL13qYvc3u9Tja4XIpCLxoTxCFkI67zgqB4DQwst92sNwsGYAZry9Fjlt/icgN9R9k+ksrycOcEMkertZ9BiVZyk0UOBRalLNLcYNqUhvqmW1QSB+upgLRGgXOcxcygUXlWhHPIZ71I2wrDdb1Yn6zyeaTkjQo5J6VAMCuZ8gT7p+aTF33t3NEKShTfugBOoL6Np2d8Jfo4L7GITn4Kw24WoJFmwwjzFzq42WnuBuhkiKPTOGahFdl4pYkQSr054LU/GXKJrIQX3Pn2geeRLvMbddp2dk4yDCbE63EQxyXHfdGqXDrR8S6sShs59X5Qj/uJxXw6+gTLTOmjKd841zJE80fd8rwQYXq3v8+iqYKV1hERfTtqqXZuYmFkJjDenlzQmCIFzicHl4ltymV3X5Q2FRdsC9jne8CtqGBut3naeayJwhUKbc9gvF5u9EQBT3y7+BSgUcnBboaFWd41RUHD5uuZrTUsr3a61M77p6+SLl0mLHnnHCIzUHiB70cNrrUVmr6FyW46qhZ6g8sxUPw3E4K73eM/YWDPkv+xcawcwWwKGKATXoCwvcfuX6qpVQIKG1SQ0fz5D+4DULU/IY4S+dSrJk3AIbO+BkraLmPWc1mqNlVezo04xojEkahER2X9g0iEhDL65X4JezMontJJ8hVKDhbnvLN3rfFXIqcRzc0lmPD28VGC9y5X2VqcEuRDI9iLz9r18j5TTSRgWeRLj/AVeJL4i17M0x3jBhev4zJvZ8YO51pfAP4Pj2Q/MgJNRDLb2aPro7uTt8Wq2yECvHSgRILDrEQcK5fIbEpBU89+jXJcqjENCI81fP87oPHiIyS97NVhhU6GKL5Gx14EKUPu5JEA0n2n1M3AciYAAJs6G/XzcJQK6n8z83Wx6nu6crwFBbq8M5UMKJBXtUGRQIxRxpT6f7UhWJOTyGwr7c05c8TsloVgSLSjSnBdF2gv90ups9ZzcZheLtRqS395zciyPyncPLH9dMmz5WhLlZbFnIsWpoP6BRgyU/0AsJJstmXfYhv6/iC/PIHDdmcyaTF8q+WYKj9yGGvUBYI30USQzUbWV7Q18mskHS0HHF/vJtkOS8nLQxD7C1yZDDW4r0/vGjaklWCkRuLgjAR90TYXUV8ezfNrQpRyPohvU/4i1/WQpyPV9zOllLbBTj5a34y675DZ7np9stKRKlGWfIwSvfMp8pX2jV4P5vcFN0IZOaFhTC5hMC9RVeZzfW47BEFlAvbp9GdwgdnSLi6fsXC3NXDJ9l/I7pysCxptwalsK66BZBR+DElMCMGCSqGSIb3DQEJFTEWBBRYa3G5zDyNDmnDtwqNJ75gWXpYmTBBMDEwDQYJYIZIAWUDBAIBBQAEIGOuaxQnb7HkLGdd0HlJvhVruHiNPa/nw0DB7E1JwZjxBAj69WXROxcQcAICCAA=",
            "keyVaultIdTokens": "[split(parameters('keyVaultId'), '/')]",
            "keyVaultSubscriptionId": "[variables('keyVaultIdTokens')[2]]",
            "keyVaultResourceGroupName": "[variables('keyVaultIdTokens')[4]]",
            "keyVaultName": "[variables('keyVaultIdTokens')[8]]",
            "applicationGatewayCertificatePath": "configuration/acahello.demoapp.com.pfx"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(resourceGroup().id)]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "14985913302549051532"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      },
                      "maxLength": 10,
                      "minLength": 2
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "keyVaultUserAssignedIdentity": "[format('{0}-{1}-KeyVaultReader', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGatewayUserAssignedIdentity]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "18120221178179977349"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 128,
                      "minLength": 3,
                      "metadata": {
                        "description": "Required. The name of the user assigned managed Identity. 3-128, can contain \"-\" and \"_\""
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the managedIDentity."
                      },
                      "value": "[parameters('name')]"
                    },
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The id of the managedIDentity."
                      },
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "The type of the managedIDentity."
                      },
                      "value": "Microsoft.ManagedIdentity/userAssignedIdentities"
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ServicePrincipalId of the managedIDentity."
                      },
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                    },
                    "tenantId": {
                      "type": "string",
                      "metadata": {
                        "description": "The TenantId of the managedIDentity."
                      },
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').tenantId]"
                    },
                    "clientId": {
                      "type": "string",
                      "metadata": {
                        "description": "The clientId of the managedIDentity."
                      },
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "A user-assigned managed identity that enables Application Gateway to access Key Vault for its TLS certs."
              }
            },
            {
              "condition": "[parameters('enableApplicationGatewayCertificate')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('appGatewayAddCertificates-Deployment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "subscriptionId": "[variables('keyVaultSubscriptionId')]",
              "resourceGroup": "[variables('keyVaultResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[variables('keyVaultName')]"
                  },
                  "appGatewayCertificateData": {
                    "value": "[variables('$fxv#0')]"
                  },
                  "appGatewayCertificateKeyName": {
                    "value": "[parameters('applicationGatewayCertificateKeyName')]"
                  },
                  "appGatewayUserAssignedIdentityPrincipalId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.principalId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "2334743273643540547"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string"
                    },
                    "appGatewayUserAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "appGatewayCertificateKeyName": {
                      "type": "string"
                    },
                    "appGatewayCertificateData": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "keyVaultSecretUserRoleGuid": "4633458b-17de-408a-b874-0445c86b69e6"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('appGatewayCertificateKeyName'))]",
                      "properties": {
                        "value": "[parameters('appGatewayCertificateData')]",
                        "contentType": "application/x-pkcs12",
                        "attributes": {
                          "enabled": true
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', parameters('keyVaultName'), parameters('appGatewayCertificateKeyName'))]",
                      "name": "[guid(subscription().id, resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('appGatewayUserAssignedIdentityPrincipalId'), 'KeyVaultSecretUser')]",
                      "properties": {
                        "principalId": "[parameters('appGatewayUserAssignedIdentityPrincipalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('keyVaultSecretUserRoleGuid'))]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('appGatewayCertificateKeyName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "SecretUri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('appGatewayCertificateKeyName')), '2022-07-01').secretUri]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64))]"
              ],
              "metadata": {
                "description": "Adds the PFX file into Azure Key Vault for consumption by Application Gateway."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('appGatewayConfiguration-Deployment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appGatewayName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "appGatewayFqdn": {
                    "value": "[parameters('applicationGatewayFqdn')]"
                  },
                  "appGatewayPrimaryBackendEndFqdn": {
                    "value": "[parameters('applicationGatewayPrimaryBackendEndFqdn')]"
                  },
                  "appGatewayBackendHealthProbePath": {
                    "value": "[parameters('appGatewayBackendHealthProbePath')]"
                  },
                  "appGatewayPublicIpName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGatewayPip]"
                  },
                  "appGatewaySubnetId": {
                    "value": "[parameters('applicationGatewaySubnetId')]"
                  },
                  "appGatewayUserAssignedIdentityId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.id.value]"
                  },
                  "keyVaultSecretId": "[if(parameters('enableApplicationGatewayCertificate'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('keyVaultSubscriptionId'), variables('keyVaultResourceGroupName')), 'Microsoft.Resources/deployments', take(format('appGatewayAddCertificates-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.SecretUri.value), createObject('value', ''))]",
                  "appGatewayLogAnalyticsId": {
                    "value": "[parameters('applicationGatewayLogAnalyticsId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "3151893290969817230"
                    }
                  },
                  "parameters": {
                    "appGatewayName": {
                      "type": "string"
                    },
                    "appGatewayFqdn": {
                      "type": "string",
                      "metadata": {
                        "description": "The FQDN of the Application Gateawy.Must match the TLS Certificate."
                      }
                    },
                    "appGatewaySubnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The subnet resource id to use for Application Gateway."
                      }
                    },
                    "appGatewayPrimaryBackendEndFqdn": {
                      "type": "string"
                    },
                    "appGatewayBackendHealthProbePath": {
                      "type": "string"
                    },
                    "appGatewayUserAssignedIdentityId": {
                      "type": "string"
                    },
                    "appGatewayPublicIpName": {
                      "type": "string"
                    },
                    "appGatewayLogAnalyticsId": {
                      "type": "string",
                      "metadata": {
                        "description": "Provide a resource ID of the Web Analytics WS if you need diagnostic settngs, or nothing if you don t need any"
                      }
                    },
                    "keyVaultSecretId": {
                      "type": "securestring"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('appGatewayPublicIpName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "Standard",
                        "tier": "Regional"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "Static"
                      }
                    },
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2019-09-01",
                      "name": "[parameters('appGatewayName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('appGatewayUserAssignedIdentityId'))]": {}
                        }
                      },
                      "properties": {
                        "sku": {
                          "name": "WAF_v2",
                          "tier": "WAF_v2"
                        },
                        "gatewayIPConfigurations": [
                          {
                            "name": "appGatewayIpConfig",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('appGatewaySubnetId')]"
                              }
                            }
                          }
                        ],
                        "sslCertificates": "[if(not(empty(parameters('keyVaultSecretId'))), createArray(createObject('name', parameters('appGatewayFqdn'), 'properties', createObject('keyVaultSecretId', parameters('keyVaultSecretId')))), createArray())]",
                        "trustedRootCertificates": [],
                        "frontendIPConfigurations": [
                          {
                            "name": "appGwPublicFrontendIp",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('appGatewayPublicIpName'))]"
                              }
                            }
                          }
                        ],
                        "frontendPorts": "[if(not(empty(parameters('keyVaultSecretId'))), createArray(createObject('name', 'port_443', 'properties', createObject('port', 443)), createObject('name', 'port_80', 'properties', createObject('port', 80))), createArray(createObject('name', 'port_80', 'properties', createObject('port', 80))))]",
                        "backendAddressPools": [
                          {
                            "name": "acaServiceBackend",
                            "properties": {
                              "backendAddresses": [
                                {
                                  "fqdn": "[parameters('appGatewayPrimaryBackendEndFqdn')]"
                                }
                              ]
                            }
                          }
                        ],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "defaultHttpBackendHttpSetting",
                            "properties": {
                              "port": 80,
                              "protocol": "Http",
                              "cookieBasedAffinity": "Disabled",
                              "pickHostNameFromBackendAddress": true,
                              "affinityCookieName": "ApplicationGatewayAffinity",
                              "requestTimeout": 120
                            }
                          },
                          {
                            "name": "https",
                            "properties": {
                              "port": 443,
                              "protocol": "Https",
                              "cookieBasedAffinity": "Disabled",
                              "pickHostNameFromBackendAddress": true,
                              "requestTimeout": 20,
                              "probe": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/probes', parameters('appGatewayName'), 'webProbe')]"
                              }
                            }
                          }
                        ],
                        "httpListeners": "[if(empty(parameters('keyVaultSecretId')), createArray(createObject('name', 'httpListener', 'properties', createObject('frontendIPConfiguration', createObject('id', format('{0}/frontendIPConfigurations/appGwPublicFrontendIp', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))), 'frontendPort', createObject('id', format('{0}/frontendPorts/port_80', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))), 'protocol', 'Http', 'hostnames', createArray(), 'requireServerNameIndication', false()))), createArray(createObject('name', 'httpListener', 'properties', createObject('frontendIPConfiguration', createObject('id', format('{0}/frontendIPConfigurations/appGwPublicFrontendIp', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))), 'frontendPort', createObject('id', format('{0}/frontendPorts/port_443', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))), 'protocol', 'Https', 'sslCertificate', createObject('id', format('{0}/sslCertificates/{1}', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), parameters('appGatewayFqdn'))), 'hostnames', createArray(), 'requireServerNameIndication', false()))))]",
                        "urlPathMaps": [],
                        "requestRoutingRules": [
                          {
                            "name": "routingRules",
                            "properties": {
                              "ruleType": "Basic",
                              "httpListener": {
                                "id": "[format('{0}/httpListeners/httpListener', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))]"
                              },
                              "backendAddressPool": {
                                "id": "[format('{0}/backendAddressPools/acaServiceBackend', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))]"
                              },
                              "backendHttpSettings": {
                                "id": "[format('{0}/backendHttpSettingsCollection/https', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))]"
                              }
                            }
                          }
                        ],
                        "probes": [
                          {
                            "name": "webProbe",
                            "properties": {
                              "protocol": "Https",
                              "host": "[parameters('appGatewayPrimaryBackendEndFqdn')]",
                              "path": "[parameters('appGatewayBackendHealthProbePath')]",
                              "interval": 30,
                              "timeout": 30,
                              "unhealthyThreshold": 3,
                              "pickHostNameFromBackendHttpSettings": false,
                              "minServers": 0,
                              "match": {
                                "statusCodes": [
                                  "200-499"
                                ]
                              }
                            }
                          }
                        ],
                        "rewriteRuleSets": [],
                        "redirectConfigurations": [],
                        "webApplicationFirewallConfiguration": {
                          "enabled": true,
                          "firewallMode": "Detection",
                          "ruleSetType": "OWASP",
                          "ruleSetVersion": "3.0",
                          "disabledRuleGroups": [],
                          "requestBodyCheck": true,
                          "maxRequestBodySizeInKb": 128,
                          "fileUploadLimitInMb": 100
                        },
                        "enableHttp2": true,
                        "autoscaleConfiguration": {
                          "minCapacity": 2,
                          "maxCapacity": 3
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('appGatewayPublicIpName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('appGatewayLogAnalyticsId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/applicationGateways/{0}', parameters('appGatewayName'))]",
                      "name": "[format('agw-diagnostics-{0}', uniqueString(resourceGroup().id))]",
                      "properties": {
                        "workspaceId": "[parameters('appGatewayLogAnalyticsId')]",
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ],
                        "metrics": [
                          {
                            "category": "AllMetrics",
                            "enabled": false,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "applicationGatewayFqdn": {
                      "type": "string",
                      "metadata": {
                        "description": "The FQDN of the application gateway."
                      },
                      "value": "[parameters('appGatewayFqdn')]"
                    },
                    "applicationGatewayPublicIp": {
                      "type": "string",
                      "metadata": {
                        "description": "The public IP address of the application gateway."
                      },
                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('appGatewayPublicIpName')), '2021-02-01').ipAddress]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('keyVaultSubscriptionId'), variables('keyVaultResourceGroupName')), 'Microsoft.Resources/deployments', take(format('appGatewayAddCertificates-Deployment-{0}', uniqueString(resourceGroup().id)), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64))]"
              ],
              "metadata": {
                "description": "Azure Application Gateway, which acts as the public Internet gateway and WAF for the workload."
              }
            }
          ],
          "outputs": {
            "applicationGatewayFqdn": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the Azure Application Gateway."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('appGatewayConfiguration-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.applicationGatewayFqdn.value]"
            },
            "applicationGatewayPublicIp": {
              "type": "string",
              "metadata": {
                "description": "The public IP address of the Azure Application Gateway."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('appGatewayConfiguration-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.applicationGatewayPublicIp.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('helloWorlSampleApp-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64))]"
      ]
    }
  ],
  "outputs": {
    "hubVNetId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of hub virtual network."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.hubVNetId.value]"
    },
    "hubResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Hub resource group."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.resourceGroupName.value]"
    },
    "spokeResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke resource group."
      },
      "value": "[variables('rgSpokeName')]"
    },
    "spokeVNetId": {
      "type": "string",
      "metadata": {
        "description": "The  resource ID of the Spoke Virtual Network."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeVNetId.value]"
    },
    "spokeVnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke Virtual Network."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeVNetName.value]"
    },
    "spokeInfraSubnetId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Spoke Infrastructure Subnet."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeInfraSubnetId.value]"
    },
    "spokeInfraSubnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke Infrastructure Subnet."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeInfraSubnetName.value]"
    },
    "spokePrivateEndpointsSubnetId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Spoke Private Endpoints Subnet."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokePrivateEndpointsSubnetId.value]"
    },
    "spokePrivateEndpointsSubnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke Private Endpoints Subnet."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokePrivateEndpointsSubnetName.value]"
    },
    "spokeApplicationGatewaySubnetId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Spoke Application Gateway Subnet. If \"spokeApplicationGatewaySubnetAddressPrefix\" is empty, the subnet will not be created and the value returned is empty."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeApplicationGatewaySubnetId.value]"
    },
    "spokeApplicationGatewaySubnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke Application Gateway Subnet.  If \"spokeApplicationGatewaySubnetAddressPrefix\" is empty, the subnet will not be created and the value returned is empty."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeApplicationGatewaySubnetName.value]"
    },
    "containerRegistryId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the container registry."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryId.value]"
    },
    "containerRegistryName": {
      "type": "string",
      "metadata": {
        "description": "The name of the container registry."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryName.value]"
    },
    "containerRegistryUserAssignedIdentityId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the user assigned managed identity for the container registry to be able to pull images from it."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryUserAssignedIdentityId.value]"
    },
    "keyVaultId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the key vault."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.keyVaultId.value]"
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "The name of the key vault."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.keyVaultName.value]"
    },
    "keyVaultUserAssignedIdentityId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the user assigned managed identity to access the key vault."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.keyVaultUserAssignedIdentityId.value]"
    },
    "containerAppsEnvironmentId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the container apps environment."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerAppsEnvironmentId.value]"
    },
    "containerAppsEnvironmentName": {
      "type": "string",
      "metadata": {
        "description": "The name of the container apps environment."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerAppsEnvironmentName.value]"
    }
  }
}