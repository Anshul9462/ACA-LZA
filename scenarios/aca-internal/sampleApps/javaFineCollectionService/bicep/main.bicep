targetScope = 'resourceGroup'

// ------------------
//    PARAMETERS
// ------------------

@description('The location where the resources will be created.')
param location string = resourceGroup().location

@description('Optional. The prefix to be used for all resources created by this template.')
param prefix string = ''

@description('Optional. The suffix to be used for all resources created by this template.')
param suffix string = ''

@description('Optional. The tags to be assigned to the created resources.')
param tags object = {}

@description('The name of the container apps environment.')
param containerAppsEnvironmentName string

// Servivces
@description('The name of the service for the vehicle registration service.')
param vehicleRegistrationServiceName string

@description('The name of the service for the fine collection service.')
param fineCollectionServiceName string

@description('The name of the service for the traffic control service.')
param trafficControlServiceName string

// Spoke Private Endpoints Subnet
@description('The name of the spoke VNET.')
param spokeVNetName string

@description('The name of the subnet in the VNet to which the private endpoint will be connected.')
param spokePrivateEndpointsSubnetName string

// Service Bus
@description('Optional. The name of the service bus namespace. If set, it overrides the name generated by the template.')
param serviceBusName string = '${prefix}sb-${uniqueString(resourceGroup().id)}${suffix}'

@description('The name of the service bus topic.')
param serviceBusTopicName string

@description('The name of the service bus topic\'s authorization rule.')
param serviceBusTopicAuthorizationRuleName string

@description('Optional. The name of service bus\' private endpoint. If set, it overrides the name generated by the template.')
param serviceBusPrivateEndpointName string = '${prefix}pep-sb-${uniqueString(resourceGroup().id)}${suffix}'

// Cosmos DB
@description('Optional. The name of Cosmos DB resource. If set, it overrides the name generated by the template.')
param cosmosDbName string ='${prefix}cosno-${uniqueString(resourceGroup().id)}${suffix}'

@description('The name of Cosmos DB\'s database.')
param cosmosDbDatabaseName string

@description('The name of Cosmos DB\'s collection.')
param cosmosDbCollectionName string

@description('Optional. The name of Cosmos DB resource. If set, it overrides the name generated by the template.')
param cosmosDbPrivateEndpointName string = '${prefix}pep-cosno-${uniqueString(resourceGroup().id)}${suffix}'

// Dapr components
@description('The name of Dapr component for the secret store building block.')
// We disable lint of this line as it is not a secret but the name of the Dapr component
#disable-next-line secure-secrets-in-params
param secretStoreComponentName string

@description('The name of Dapr component for the pub/sub building block.')
param pubSubComponentName string = 'pubsub'

@description('The name of Dapr component for the state store building block.')
param stateStoreComponentName string

// Key Vault
@description('The resource ID of the key vault to store the license key for the fine collection service.')
param keyVaultId string

@description('The name of the secret containing the license key value for Fine Collection Service.')
param fineLicenseKeySecretName string = 'license-key'

@secure()
@description('The license key for Fine Collection Service.')
param fineLicenseKeySecretValue string

// Container Registry & Images
@description('The name of the Azure Container Registry.')
param acrName string

@description('The image for the vehicle registration service.')
param vehicleRegistrationServiceImage string

@description('The image for the fine collection service.')
param fineCollectionServiceImage string

@description('The image for the traffic control service.')
param trafficControlServiceImage string

@description('The resource ID of the user assigned managed identity for the container registry to be able to pull images from it.')
param containerRegistryUserAssignedIdentityId string

// Simulation
@description('If true, the simulation will be deployed in the environment and use the traffic control service FQDN.')
param deploySimalutionIntheEnvironment bool

@description('Optional. The name of the the simulation. If deploySimalutionIntheEnvironment is set to true, this parameter is required.')
param simulationName string = ''

@description('Optional. The image for the simulation. If deploySimalutionIntheEnvironment is set to true, this parameter is required.')
param simulationImage string = ''

// Application Gateway
@description('The FQDN of the Application Gateawy.Must match the TLS Certificate.')
param applicationGatewayFQDN string

@description('The subnet name to use for Application Gateway.')
param spokeApplicationGatewaySubnetName string

@description('Enable or disable Application Gateway Certificate (PFX).')
param enableApplicationGatewayCertificate bool

@description('The name of the certificate key to use for Application Gateway certificate.')
param applicationGatewayCertificateKeyName string


// ------------------
//    VARIABLES
// ------------------

var keyVaultIdTokens = split(keyVaultId, '/')
var keyVaultName = keyVaultIdTokens[8]

var appGatewayBackendHealthProbePath = '/heatlhz'

// ------------------
// DEPLOYMENT TASKS
// ------------------

module serviceBus 'modules/service-bus.bicep' = {
  name: 'serviceBus-${uniqueString(resourceGroup().id)}'
  params: {
    serviceBusName: serviceBusName
    location: location
    tags: tags
    spokeVNetName: spokeVNetName
    spokePrivateEndpointsSubnetName: spokePrivateEndpointsSubnetName
    serviceBusTopicName: serviceBusTopicName
    serviceBusTopicAuthorizationRuleName: serviceBusTopicAuthorizationRuleName
    fineCollectionServiceName: fineCollectionServiceName
    serviceBusPrivateEndpointName: serviceBusPrivateEndpointName
  }
}

module cosmosDb 'modules/cosmos-db.bicep' = {
  name: 'cosmosDb-${uniqueString(resourceGroup().id)}'
  params: {
    cosmosDbName: cosmosDbName
    location: location
    tags: tags
    spokeVNetName: spokeVNetName
    spokePrivateEndpointsSubnetName: spokePrivateEndpointsSubnetName
    cosmosDbDatabaseName: cosmosDbDatabaseName
    cosmosDbCollectionName: cosmosDbCollectionName
    cosmosDbPrivateEndpointName: cosmosDbPrivateEndpointName
  }
}

module daprComponents 'modules/dapr-components.bicep' = {
  name: 'daprComponents-${uniqueString(resourceGroup().id)}'
  params: {
    secretStoreComponentName: secretStoreComponentName
    pubSubComponentName: pubSubComponentName
    stateStoreComponentName: stateStoreComponentName
    
    containerAppsEnvironmentName: containerAppsEnvironmentName
    
    keyVaultName: keyVaultName
    
    serviceBusName: serviceBus.outputs.serviceBusName

    cosmosDbName: cosmosDb.outputs.cosmosDbName
    cosmosDbDatabaseName: cosmosDb.outputs.cosmosDbDatabaseName
    cosmosDbCollectionName: cosmosDb.outputs.cosmosDbCollectionName
    
    fineCollectionServiceName: fineCollectionServiceName
    trafficControlServiceName: trafficControlServiceName
  }
}

module containerApps 'modules/container-apps.bicep' = {
  name: 'containerApps-${uniqueString(resourceGroup().id)}'
  params: {
    vehicleRegistrationServiceName: vehicleRegistrationServiceName
    fineCollectionServiceName: fineCollectionServiceName
    trafficControlServiceName: trafficControlServiceName
    
    location: location
    tags: tags

    containerAppsEnvironmentName: containerAppsEnvironmentName

    containerRegistryUserAssignedIdentityId: containerRegistryUserAssignedIdentityId
    
    keyVaultId: keyVaultId
    fineLicenseKeySecretName: fineLicenseKeySecretName
    fineLicenseKeySecretValue: fineLicenseKeySecretValue

    serviceBusName: serviceBus.outputs.serviceBusName
    serviceBusTopicName: serviceBus.outputs.serviceBusTopicName
    serviceBusTopicAuthorizationRuleName: serviceBus.outputs.serviceBusTopicAuthorizationRuleName
    
    cosmosDbName: cosmosDb.outputs.cosmosDbName
    cosmosDbDatabaseName: cosmosDb.outputs.cosmosDbDatabaseName
    cosmosDbCollectionName: cosmosDb.outputs.cosmosDbCollectionName
    
    acrName: acrName
    vehicleRegistrationServiceImage: vehicleRegistrationServiceImage
    fineCollectionServiceImage: fineCollectionServiceImage
    trafficControlServiceImage: trafficControlServiceImage

    deploySimalutionIntheEnvironment: deploySimalutionIntheEnvironment
    simulationName: simulationName
    simulationImage: simulationImage
  }
  dependsOn: [
    daprComponents
  ]
}

resource spokeVNet 'Microsoft.Network/virtualNetworks@2021-02-01' existing = {
  name: spokeVNetName
}

resource spokeApplicationGatewaySubnet 'Microsoft.Network/virtualNetworks/subnets@2021-02-01' existing = {
  name: spokeApplicationGatewaySubnetName
  parent: spokeVNet
}

module applicationGateway '../../../bicep/06-application-gateway/main.bicep' = {
  name: 'applicationGateway-${uniqueString(resourceGroup().id)}'
  params: {
    location: location
    prefix: prefix
    suffix: suffix
    tags: tags
    applicationGatewayFQDN: applicationGatewayFQDN
    applicationGatewaySubnetId: spokeApplicationGatewaySubnet.id
    applicationGatewayPrimaryBackendEndFQDN: containerApps.outputs.trafficControlServiceFQDN
    appGatewayBackendHealthProbePath: appGatewayBackendHealthProbePath
    enableApplicationGatewayCertificate: enableApplicationGatewayCertificate
    applicationGatewayCertificateKeyName: applicationGatewayCertificateKeyName
    keyVaultId: keyVaultId
  }
}
